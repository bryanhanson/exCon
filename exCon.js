var CL = [{"level":[100],"x":[1,0.9884,0.9778,0.9767,0.9651,0.9546,0.9535,0.9429,0.9419,0.9313,0.9302,0.9197,0.9186,0.908,0.907,0.8964,0.8953,0.8843,0.8837,0.8725,0.8721,0.8608,0.8605,0.8491,0.8488,0.8375,0.8372,0.826,0.8256,0.8145,0.8145,0.814,0.8034,0.8023,0.7918,0.7918,0.7918,0.7907,0.7801,0.7801,0.7801,0.7801,0.7791,0.7685,0.7685,0.7685,0.7685],"y":[0.5515,0.5515,0.5667,0.5682,0.5682,0.5833,0.5849,0.6,0.6015,0.6167,0.6182,0.6333,0.6349,0.65,0.6515,0.6667,0.6675,0.6833,0.6839,0.7,0.7005,0.7167,0.7171,0.7333,0.7337,0.75,0.7505,0.7667,0.7675,0.7833,0.8,0.8015,0.8167,0.8182,0.8333,0.85,0.8667,0.8682,0.8833,0.9,0.9167,0.9333,0.9349,0.95,0.9667,0.9833,1]},{"level":[100],"x":[0.908,0.9186,0.9302,0.9419,0.9429,0.9429,0.9429,0.9535,0.9546,0.9651,0.9662,0.9767,0.9778,0.9884,0.9894,1],"y":[0,0.0151,0.0151,0.0151,0.0167,0.0333,0.05,0.0651,0.0667,0.0818,0.0833,0.0985,0.1,0.1151,0.1167,0.1318]},{"level":[100],"x":[1,0.9894,0.9884,0.9767,0.9662,0.9662,0.9767,0.9778,0.9884,0.9894,1],"y":[0.1682,0.1833,0.1849,0.1849,0.2,0.2167,0.2318,0.2333,0.2485,0.25,0.2651]},{"level":[120],"x":[0.1971,0.186,0.1855,0.1855,0.1822,0.1744,0.174,0.1705,0.1686,0.1667,0.1628,0.1624,0.157,0.1512,0.1453,0.1395,0.1337,0.1279,0.124,0.1163,0.114,0.1093,0.1047,0.1044,0.0988,0.093,0.0926,0.086,0.0814,0.0811,0.0756,0.0698,0.0695,0.0674,0.064,0.061,0.0581,0.0543,0.0465,0.0436,0.0407,0.0436,0.0378,0.0349,0.0347,0.0329,0.031,0.0271,0.0252,0.0249,0.0233,0.0209,0.0213,0.0231,0.0233,0.0271,0.031,0.0347,0.0349,0.0419,0.0465,0.0504,0.0581,0.0659,0.0698,0.0756,0.0814,0.0872,0.093,0.0969,0.1043,0.1047,0.1124,0.1163,0.1202,0.1279,0.1385,0.1395,0.1512,0.157,0.1628,0.174,0.1744,0.186,0.1977,0.2093,0.2122,0.2209,0.2326,0.2442,0.2458,0.2535,0.2558,0.2674,0.2791,0.2907,0.3023,0.314,0.3256,0.3372,0.3488,0.3605,0.3721,0.3779,0.3837,0.3953,0.407,0.4075,0.4186,0.4244,0.4302,0.4419,0.4424,0.4535,0.4593,0.4651,0.4767,0.4884,0.4894,0.5,0.5116,0.5233,0.5243,0.5349,0.5465,0.5581,0.5698,0.5708,0.5814,0.5825,0.593,0.5936,0.6047,0.6052,0.6163,0.6279,0.6395,0.6512,0.6628,0.6744,0.686,0.6977,0.7093,0.7209,0.7213,0.7302,0.7326,0.7403,0.7442,0.7481,0.7558,0.7564,0.7674,0.7678,0.7713,0.7752,0.7791,0.7794,0.7849,0.7907,0.7913,0.7965,0.8023,0.8034,0.814,0.8145,0.8198,0.8256,0.8314,0.8372,0.843,0.8488,0.8494,0.8499,0.8605,0.861,0.8643,0.8651,0.8651,0.8643,0.8605,0.8581,0.8538,0.849,0.8488,0.8455,0.843,0.843,0.843,0.8465,0.8488,0.8505,0.8491,0.8488,0.8459,0.8401,0.8372,0.8333,0.8259,0.8256,0.8198,0.8143,0.814,0.8081,0.8034,0.8027,0.8023,0.7907,0.7896,0.7791,0.7674,0.7664,0.7558,0.7547,0.7442,0.7431,0.7326,0.7209,0.7093,0.6977,0.686,0.6744,0.6734,0.6628,0.6512,0.6406,0.6395,0.6279,0.6163,0.6057,0.6047,0.5941,0.593,0.5814,0.5803,0.5698,0.5581,0.5571,0.5465,0.5349,0.5233,0.5222,0.5116,0.5,0.4884,0.4873,0.4767,0.4651,0.4535,0.4419,0.4302,0.4197,0.4186,0.407,0.3964,0.3953,0.3843,0.3837,0.3727,0.3721,0.361,0.3605,0.3494,0.3488,0.3378,0.3372,0.3261,0.3256,0.314,0.3029],"y":[0,0.0159,0.0167,0.0333,0.05,0.0659,0.0667,0.0833,0.1,0.1167,0.1318,0.1333,0.15,0.1583,0.1667,0.175,0.1833,0.1917,0.2,0.2111,0.2167,0.2333,0.2492,0.25,0.2667,0.2825,0.2833,0.3,0.3159,0.3167,0.3333,0.3492,0.35,0.3667,0.3833,0.4,0.4083,0.4167,0.4278,0.4333,0.45,0.4667,0.4833,0.4985,0.5,0.5167,0.5333,0.55,0.5667,0.5833,0.5917,0.6,0.6167,0.6333,0.6341,0.65,0.6667,0.6833,0.6839,0.7,0.7111,0.7167,0.725,0.7333,0.7389,0.75,0.7583,0.7667,0.7778,0.7833,0.8,0.8008,0.8167,0.825,0.8333,0.8444,0.85,0.8508,0.8625,0.8667,0.8708,0.8833,0.8837,0.8837,0.8867,0.8958,0.9,0.91,0.9119,0.9152,0.9167,0.9333,0.9361,0.9361,0.9361,0.9361,0.9361,0.9389,0.9405,0.9429,0.9467,0.9433,0.9375,0.9333,0.9306,0.925,0.9172,0.9167,0.9056,0.9,0.8944,0.8841,0.8833,0.8722,0.8667,0.8611,0.8556,0.8505,0.85,0.8349,0.8341,0.8339,0.8333,0.8182,0.8182,0.8182,0.8175,0.8167,0.8015,0.8,0.7849,0.7833,0.7675,0.7667,0.7556,0.7505,0.7508,0.7503,0.7505,0.7556,0.7583,0.7625,0.7567,0.7504,0.75,0.7333,0.7278,0.7167,0.7083,0.7,0.6841,0.6833,0.6675,0.6667,0.65,0.6333,0.6182,0.6167,0.6,0.5849,0.5833,0.5667,0.5515,0.55,0.5349,0.5333,0.5167,0.5083,0.5,0.4917,0.4833,0.4682,0.4667,0.45,0.4349,0.4333,0.4167,0.4,0.3833,0.3667,0.3556,0.35,0.3333,0.3167,0.3159,0.3,0.2833,0.2667,0.25,0.2333,0.225,0.2167,0.2,0.1985,0.1833,0.1667,0.1583,0.15,0.1333,0.1318,0.1167,0.1,0.0985,0.0833,0.0667,0.05,0.0492,0.0485,0.05,0.0651,0.0651,0.0667,0.0818,0.0833,0.0985,0.1,0.1151,0.1159,0.1159,0.1159,0.1151,0.1159,0.1167,0.1222,0.125,0.1167,0.1159,0.1151,0.1151,0.1,0.0985,0.0833,0.0818,0.0818,0.0833,0.0985,0.0985,0.1,0.1151,0.1151,0.1159,0.1167,0.1318,0.1318,0.1325,0.1333,0.1485,0.1485,0.1492,0.1485,0.1485,0.1333,0.1325,0.1318,0.1167,0.1159,0.1,0.0992,0.0833,0.0825,0.0667,0.0659,0.05,0.0492,0.0333,0.0325,0.0167,0.0161,0.0111,0]},{"level":[140],"x":[0.0698,0.0696,0.0651,0.0651,0.0659,0.0674,0.0695,0.0695,0.0695,0.0695,0.0698,0.0736,0.0785,0.0814,0.0853,0.093,0.0988,0.1047,0.1159,0.1163,0.1275,0.1279,0.1392,0.1395,0.1508,0.1512,0.1589,0.1628,0.1686,0.1744,0.1822,0.186,0.1948,0.1977,0.2093,0.2132,0.2209,0.2323,0.2326,0.2442,0.2558,0.2674,0.2791,0.2907,0.3013,0.3023,0.314,0.3256,0.3372,0.3488,0.3605,0.3608,0.3721,0.3727,0.3837,0.3953,0.3956,0.407,0.4147,0.4186,0.4302,0.4305,0.4419,0.4421,0.4488,0.4506,0.4506,0.4535,0.4539,0.4574,0.4622,0.4651,0.4767,0.4773,0.4884,0.4922,0.5,0.5004,0.5087,0.5116,0.5233,0.5349,0.5465,0.5571,0.5581,0.5698,0.5814,0.592,0.593,0.6047,0.6163,0.6268,0.6279,0.6395,0.6506,0.6512,0.6628,0.6744,0.686,0.6871,0.6977,0.6987,0.6982,0.6981,0.6982,0.6977,0.6866,0.686,0.6744,0.6639,0.6639,0.6639,0.6744,0.675,0.675,0.686,0.6871,0.6977,0.7035,0.7093,0.7209,0.7326,0.7336,0.7442,0.7558,0.7581,0.7645,0.7674,0.7713,0.7791,0.7794,0.7868,0.7907,0.7946,0.8023,0.8027,0.8052,0.8062,0.8062,0.8047,0.804,0.8025,0.8023,0.7918,0.7907,0.7791,0.7685,0.7674,0.7558,0.7442,0.7326,0.7209,0.7104,0.7093,0.6977,0.686,0.685,0.6744,0.6628,0.6512,0.6501,0.6395,0.6279,0.6163,0.6047,0.6036,0.593,0.5814,0.5698,0.5581,0.5465,0.5349,0.5233,0.5116,0.5,0.4884,0.4767,0.4651,0.4535,0.4419,0.4302,0.4264,0.4186,0.4075,0.407,0.3953,0.3837,0.3779,0.3721,0.3643,0.3605,0.3547,0.3488,0.3411,0.3372,0.3261,0.3256,0.3145,0.314,0.3023,0.2918,0.2907,0.2791,0.2785,0.2674,0.2669,0.2597,0.2558,0.25,0.2442,0.2438,0.2326,0.2322,0.2238,0.2209,0.2122,0.2093,0.1977,0.186,0.1744,0.1715,0.1628,0.157,0.1512,0.1395,0.1394,0.1312,0.1279,0.1244,0.1202,0.1163,0.1148,0.1113,0.108,0.1047,0.1045,0.103,0.1013,0.0962,0.0941,0.093,0.0897,0.0814,0.0795,0.0698],"y":[0.4997,0.5,0.5167,0.5333,0.55,0.5667,0.5833,0.6,0.6167,0.6333,0.6349,0.65,0.6667,0.675,0.6833,0.6944,0.7,0.7042,0.7167,0.7172,0.7333,0.7337,0.75,0.7505,0.7667,0.7675,0.7833,0.7889,0.8,0.8083,0.8167,0.8208,0.8333,0.8357,0.8458,0.85,0.8556,0.8667,0.8669,0.87,0.875,0.88,0.88,0.8806,0.8833,0.8836,0.8881,0.8881,0.8867,0.8861,0.8836,0.8833,0.8672,0.8667,0.86,0.8504,0.85,0.8389,0.8333,0.83,0.8169,0.8167,0.8004,0.8,0.7833,0.7667,0.75,0.7349,0.7333,0.7167,0.7,0.6944,0.6839,0.6833,0.6722,0.6667,0.6508,0.65,0.6333,0.6278,0.6278,0.625,0.6278,0.6333,0.6341,0.6389,0.6417,0.65,0.6505,0.6556,0.6515,0.6667,0.6672,0.6675,0.6833,0.6837,0.6839,0.6839,0.6839,0.6833,0.6682,0.6667,0.65,0.6333,0.6167,0.6159,0.6,0.5992,0.5985,0.5833,0.5667,0.55,0.5349,0.5333,0.5167,0.5008,0.5,0.4917,0.4833,0.4778,0.475,0.4675,0.4667,0.4611,0.4556,0.45,0.4333,0.425,0.4167,0.4008,0.4,0.3833,0.375,0.3667,0.3508,0.35,0.3333,0.3167,0.3,0.2833,0.2667,0.25,0.2485,0.2333,0.2328,0.2222,0.2167,0.2161,0.2125,0.2111,0.2056,0.2056,0.2,0.1995,0.1995,0.1996,0.2,0.2083,0.2083,0.2159,0.2167,0.2222,0.2278,0.2325,0.2328,0.2333,0.2389,0.2389,0.2389,0.2389,0.2389,0.2389,0.2389,0.2417,0.2444,0.2444,0.2458,0.2458,0.2496,0.2458,0.2375,0.2333,0.225,0.2167,0.2163,0.2125,0.2056,0.2,0.1944,0.1833,0.175,0.1667,0.1611,0.15,0.1444,0.1333,0.1325,0.1167,0.1161,0.1056,0.1,0.0992,0.0992,0.1,0.1159,0.1167,0.1333,0.1417,0.15,0.1651,0.1667,0.1828,0.1833,0.2,0.2042,0.2167,0.2194,0.2267,0.2286,0.231,0.2333,0.2417,0.25,0.2583,0.2664,0.2667,0.2833,0.29,0.3,0.3167,0.3292,0.3333,0.35,0.3667,0.3825,0.3833,0.4,0.4167,0.4333,0.45,0.4556,0.4667,0.4806,0.4833,0.4997]},{"level":[160],"x":[0.1163,0.114,0.1105,0.1076,0.1085,0.1105,0.1085,0.1085,0.1161,0.1163,0.1233,0.1279,0.1296,0.1337,0.1379,0.1395,0.1473,0.1512,0.1625,0.1628,0.1721,0.1744,0.1814,0.186,0.1948,0.1977,0.2064,0.2093,0.2206,0.2209,0.2326,0.2372,0.2442,0.2554,0.2558,0.2674,0.2791,0.2907,0.3013,0.3023,0.314,0.3256,0.3372,0.345,0.3488,0.3605,0.3663,0.3721,0.3837,0.384,0.3953,0.3957,0.407,0.4071,0.4093,0.414,0.414,0.4128,0.4109,0.4099,0.4186,0.419,0.4302,0.4341,0.4419,0.4477,0.4535,0.4574,0.4651,0.4657,0.4767,0.4773,0.4855,0.4884,0.4888,0.4942,0.5,0.5116,0.5233,0.5349,0.5407,0.5465,0.5581,0.5698,0.5703,0.5814,0.5818,0.5853,0.5901,0.593,0.5936,0.5969,0.5988,0.6008,0.6008,0.5936,0.593,0.5901,0.5872,0.5814,0.5698,0.5581,0.5523,0.5465,0.5349,0.5233,0.5227,0.5116,0.5,0.4884,0.4778,0.4767,0.4651,0.4539,0.4535,0.4419,0.4302,0.4186,0.407,0.3953,0.3837,0.3727,0.3721,0.3608,0.3605,0.3491,0.3488,0.3376,0.3372,0.326,0.3256,0.314,0.3034,0.3023,0.2907,0.2791,0.2674,0.2558,0.2529,0.2442,0.2403,0.2326,0.2248,0.2209,0.2093,0.2087,0.1977,0.186,0.1744,0.1628,0.1625,0.1512,0.1495,0.1492,0.1478,0.1453,0.1415,0.1395,0.1379,0.1349,0.1302,0.1279,0.1276,0.1192,0.1163],"y":[0.475,0.4833,0.5,0.5167,0.5333,0.55,0.5667,0.5833,0.6,0.6005,0.6167,0.6278,0.6333,0.65,0.6667,0.6722,0.6833,0.6867,0.7,0.7004,0.7167,0.7208,0.7333,0.74,0.75,0.7542,0.7667,0.77,0.7833,0.7837,0.7944,0.8,0.8083,0.8167,0.8169,0.8194,0.825,0.831,0.8333,0.8336,0.8336,0.8354,0.8375,0.8333,0.8315,0.8222,0.8167,0.8111,0.8003,0.8,0.7837,0.7833,0.7672,0.7667,0.75,0.7333,0.7167,0.7,0.6833,0.6667,0.6505,0.65,0.6375,0.6333,0.6222,0.6167,0.6083,0.6,0.5841,0.5833,0.5675,0.5667,0.55,0.5349,0.5333,0.5167,0.5083,0.5056,0.5008,0.5083,0.5167,0.5222,0.525,0.5182,0.5167,0.5008,0.5,0.4833,0.4667,0.4515,0.45,0.4333,0.4167,0.4,0.3833,0.3667,0.3651,0.35,0.3333,0.3292,0.3292,0.33,0.3333,0.3367,0.3433,0.3497,0.35,0.3611,0.3556,0.3542,0.35,0.3497,0.3433,0.3333,0.333,0.3329,0.3329,0.3329,0.3328,0.3292,0.3233,0.3167,0.3163,0.3,0.2996,0.2833,0.2828,0.2667,0.2661,0.25,0.2495,0.2375,0.2333,0.2329,0.2328,0.2328,0.2292,0.23,0.2333,0.2458,0.25,0.2583,0.2667,0.27,0.2828,0.2833,0.2917,0.2958,0.2996,0.2996,0.3,0.3133,0.3167,0.3333,0.35,0.3667,0.3833,0.3917,0.4,0.4167,0.4333,0.4485,0.45,0.4667,0.475]},{"level":[160],"x":[0.3023,0.2946,0.2936,0.2911,0.2911,0.2946,0.2994,0.3023,0.3101,0.314,0.3256,0.3372,0.3488,0.3547,0.3605,0.3682,0.3721,0.3744,0.3779,0.3808,0.3798,0.3721,0.3717,0.3634,0.3605,0.3488,0.3372,0.3256,0.314,0.3029,0.3023],"y":[0.5008,0.5167,0.5333,0.55,0.5667,0.5833,0.6,0.6056,0.6167,0.6208,0.6222,0.6233,0.619,0.6167,0.6111,0.6,0.5917,0.5833,0.5667,0.55,0.5333,0.5175,0.5167,0.5,0.4944,0.4875,0.4837,0.4839,0.4889,0.5,0.5008]},{"level":[180],"x":[0.1628,0.1626,0.1581,0.1541,0.1558,0.157,0.1578,0.1625,0.1628,0.1705,0.174,0.1744,0.186,0.189,0.1974,0.1977,0.2074,0.2093,0.218,0.2209,0.2297,0.2326,0.2413,0.2442,0.2554,0.2558,0.2674,0.2791,0.2896,0.2907,0.3023,0.314,0.3145,0.3256,0.3372,0.3383,0.3488,0.3494,0.3494,0.3488,0.3372,0.3266,0.3256,0.325,0.314,0.3023,0.2907,0.2801,0.2791,0.2674,0.2645,0.2616,0.2562,0.2558,0.2539,0.2508,0.2492,0.2481,0.2481,0.2471,0.2471,0.2481,0.25,0.2535,0.2558,0.2645,0.2674,0.2703,0.2791,0.2796,0.2907,0.3023,0.3034,0.314,0.3256,0.3266,0.3266,0.3266,0.3256,0.315,0.314,0.3034,0.3023,0.2907,0.2791,0.2674,0.2558,0.25,0.2442,0.2326,0.2267,0.2209,0.2093,0.1977,0.1938,0.186,0.1858,0.1783,0.1744,0.1743,0.1728,0.1725,0.1698,0.1667,0.1628],"y":[0.4985,0.5,0.5167,0.5333,0.55,0.5667,0.5833,0.6,0.6008,0.6167,0.6333,0.6337,0.6444,0.65,0.6667,0.667,0.6833,0.6875,0.7,0.7042,0.7167,0.7208,0.7333,0.7375,0.75,0.7504,0.7515,0.7515,0.7667,0.767,0.7675,0.7682,0.7667,0.7508,0.7508,0.75,0.7349,0.7333,0.7167,0.7151,0.7151,0.7,0.6992,0.7,0.7159,0.7159,0.7151,0.7,0.6992,0.6985,0.6833,0.6667,0.65,0.6485,0.6333,0.6167,0.6,0.5833,0.5667,0.55,0.5333,0.5167,0.5,0.4833,0.4792,0.4667,0.4583,0.45,0.4339,0.4333,0.4222,0.417,0.4167,0.4015,0.4015,0.4,0.3833,0.3667,0.3651,0.35,0.3485,0.3333,0.3325,0.3325,0.3278,0.3278,0.3292,0.3333,0.3389,0.3458,0.35,0.3533,0.3611,0.3633,0.3667,0.3825,0.3833,0.4,0.4151,0.4167,0.4333,0.45,0.4667,0.4833,0.4985]},{"level":[180],"x":[0.4186,0.4175,0.4175,0.4186,0.4292,0.4292,0.4302,0.4419,0.4424,0.4429,0.4429,0.4419,0.4313,0.4302,0.4186],"y":[0.4159,0.4167,0.4333,0.4349,0.45,0.4667,0.4682,0.4682,0.4667,0.45,0.4333,0.4318,0.4167,0.4161,0.4159]}]
var M = [[100,101,102,103,104,105,105,106,107,108,109,110,110,111,114,116,118,120,120,121,122,122,123,124,123,123,120,118,117,115,114,115,113,111,110,109,108,108,107,107,107,108,109,110,111,111,112,113,113,114,115,115,114,113,112,111,111,112,112,112,113,114,114,115,115,116,116,117,117,116,114,112,109,106,104,102,101,100,100,99,99,99,99,98,98,97,97],[100,101,102,103,104,105,106,107,108,109,110,110,111,113,115,118,120,121,122,124,125,125,126,127,128,127,124,121,120,118,116,114,113,112,112,110,109,109,108,108,108,109,110,111,112,112,113,114,114,115,116,116,115,114,113,112,112,113,113,114,114,115,115,116,116,117,117,118,118,117,115,113,111,107,105,103,102,101,101,100,100,100,99,99,98,98,97],[101,102,103,104,105,105,106,107,108,109,110,111,113,115,117,118,120,122,125,126,127,128,129,130,131,131,128,125,121,120,118,116,114,113,113,111,111,111,111,110,109,110,111,112,113,113,114,115,115,116,117,117,116,115,114,114,113,113,114,114,115,115,116,116,117,118,118,119,119,118,116,114,112,108,105,103,103,102,101,101,100,100,99,99,98,98,97],[101,102,103,104,105,106,107,108,109,110,111,113,115,117,117,118,121,123,126,128,130,130,131,132,133,134,131,129,125,122,120,118,116,114,113,112,112,113,112,112,111,112,113,113,114,115,116,116,117,117,118,118,116,116,115,115,115,114,114,115,116,116,117,117,118,118,119,119,120,120,117,115,112,108,106,104,103,102,102,102,101,100,99,99,99,98,98],[101,102,103,104,105,106,107,108,109,110,111,112,114,116,117,120,122,124,126,129,130,132,133,135,136,136,134,132,129,126,122,120,118,116,114,114,114,114,114,113,113,114,115,116,116,117,117,117,118,118,119,119,118,117,116,116,115,115,116,116,116,117,117,118,118,119,120,120,120,120,119,116,113,109,106,104,104,103,102,102,101,101,100,99,99,99,98],[101,102,103,104,105,106,107,108,109,110,111,111,113,115,118,121,123,125,127,129,131,133,135,137,138,138,137,134,132,130,127,122,120,118,116,116,116,116,115,113,114,115,116,117,117,118,118,119,119,119,120,120,119,118,117,117,116,116,117,117,117,118,119,119,119,120,121,121,121,121,119,116,113,110,107,105,105,103,103,103,102,101,100,100,99,99,99],[101,102,103,104,105,106,107,108,109,110,111,113,114,116,119,121,124,126,128,130,133,135,137,138,140,140,139,137,135,133,131,127,122,120,118,118,117,117,116,115,116,116,117,118,118,118,119,119,120,120,121,121,120,119,119,118,117,117,118,119,118,118,118,119,120,122,123,123,123,122,120,117,113,110,108,106,105,104,103,103,102,101,101,100,100,99,99],[100,101,102,103,104,105,106,107,108,109,110,112,114,117,119,122,124,127,129,131,134,136,138,140,142,142,142,140,138,136,133,129,125,122,120,119,118,118,117,116,117,117,118,119,119,120,120,120,121,121,121,122,121,120,120,120,119,119,120,120,120,120,120,120,123,123,124,124,124,123,121,119,114,112,108,106,106,104,104,103,102,102,101,101,100,100,99],[100,101,102,103,104,105,106,107,108,109,110,112,115,117,120,122,125,127,130,132,135,137,139,142,144,144,144,142,140,138,136,132,129,126,123,120,120,119,119,118,119,119,120,120,120,121,122,122,123,123,123,123,122,123,122,122,121,122,122,122,123,123,123,124,125,125,126,126,125,124,122,120,116,113,109,107,106,105,104,104,103,102,102,101,101,100,100],[100,101,102,103,103,104,105,106,107,108,110,114,117,119,121,123,126,128,130,133,136,139,141,144,146,147,146,145,143,141,138,136,133,130,127,124,121,120,120,120,120,120,121,122,123,124,124,125,125,126,126,125,126,126,126,125,126,127,128,128,129,129,128,128,128,128,128,128,126,125,123,122,119,114,109,108,107,106,105,104,103,103,102,102,101,100,100],[101,102,103,103,104,104,105,106,108,110,112,116,119,121,124,125,127,130,132,135,137,140,143,147,149,149,149,147,145,143,141,139,136,133,131,128,125,122,121,122,122,122,123,125,125,126,127,127,127,128,128,128,129,129,130,131,131,132,132,133,133,133,132,132,131,131,130,129,128,126,125,124,121,117,111,109,108,106,105,104,103,102,101,101,100,100,100],[101,102,103,104,104,105,106,107,108,110,114,119,121,124,126,128,129,132,134,137,140,143,147,149,151,151,151,149,147,145,143,141,138,136,134,131,128,126,124,125,125,126,126,127,128,128,129,129,130,130,131,131,132,132,133,134,135,135,136,136,137,137,136,136,135,134,133,131,129,128,127,126,123,119,115,111,109,107,105,104,103,102,101,100,100,100,99],[102,103,104,104,105,105,106,108,110,113,118,121,124,126,128,130,132,134,136,139,143,147,150,154,154,154,153,151,149,148,146,143,141,139,137,136,132,130,128,128,128,129,129,130,130,131,132,132,132,133,134,134,135,135,136,137,138,139,139,140,140,140,139,139,138,137,137,135,132,130,129,127,124,120,116,112,109,106,105,103,102,101,101,100,99,99,99],[102,103,104,104,105,106,107,108,111,116,121,124,126,128,131,134,135,137,139,143,147,152,156,157,157,157,156,155,153,151,148,146,143,142,141,140,138,135,133,132,132,133,133,133,134,135,135,135,135,136,136,137,137,138,138,139,140,141,141,142,142,143,142,142,141,141,140,139,137,134,133,129,125,121,114,110,107,106,106,104,103,102,101,100,99,99,99],[102,103,104,105,105,106,108,110,113,118,123,127,129,132,137,141,142,142,145,150,154,157,161,161,160,160,160,159,157,154,151,148,146,145,143,142,142,139,137,136,137,137,138,138,139,139,139,139,139,139,139,139,140,140,141,142,142,143,144,144,144,145,145,145,145,145,144,142,140,139,136,129,124,119,113,109,106,106,105,104,103,102,101,101,100,99,99],[102,103,104,105,106,107,109,113,116,120,125,129,133,137,143,147,149,151,152,154,158,161,164,165,164,164,163,163,160,157,154,151,149,147,145,145,144,143,141,140,141,141,141,141,141,142,142,142,142,142,142,142,143,143,143,144,144,145,146,146,146,147,148,148,148,148,145,143,142,140,134,128,123,117,112,108,106,105,105,104,104,103,102,101,100,100,99],[103,104,105,106,107,109,111,115,118,122,127,133,140,143,150,152,153,155,157,159,162,164,167,168,168,168,167,166,163,160,157,153,150,148,148,147,147,147,145,145,144,143,143,143,144,144,144,144,145,145,145,145,146,146,146,146,146,147,147,148,149,150,150,150,150,149,147,145,143,141,134,127,123,117,111,108,105,105,104,104,103,103,102,101,100,100,100],[104,105,106,107,108,110,113,117,120,125,129,138,145,151,156,156,157,158,160,164,166,168,170,171,172,171,171,169,166,163,160,156,153,151,150,150,149,149,149,148,146,146,146,146,146,146,146,147,148,148,149,149,149,148,148,148,148,149,149,150,150,150,150,150,150,150,148,146,143,141,136,129,123,117,110,108,105,104,103,102,102,101,101,100,100,100,100],[103,104,105,106,108,110,114,118,123,127,133,143,150,156,160,160,161,162,167,170,171,172,173,175,175,174,174,173,171,168,164,160,156,155,154,153,153,152,152,150,149,148,148,148,148,148,149,149,150,152,152,152,152,151,150,150,150,150,150,150,150,150,150,150,150,150,149,147,144,141,138,132,125,118,111,108,105,103,102,101,101,101,100,100,100,100,100],[102,103,104,106,108,112,116,120,125,129,137,146,154,161,163,165,166,169,172,173,174,175,177,178,178,178,178,177,174,171,168,164,160,158,157,157,156,156,156,155,152,151,150,150,151,151,152,154,156,157,157,156,155,153,152,152,151,150,150,150,150,150,150,150,150,150,150,147,144,141,138,133,127,120,113,109,106,103,101,101,101,100,100,100,100,100,100],[101,102,104,106,109,113,118,122,127,133,141,149,155,161,165,168,170,172,175,176,177,179,181,181,181,180,180,179,177,174,171,167,165,163,161,160,160,160,160,160,157,155,155,154,154,155,157,159,161,161,161,159,156,154,154,153,151,150,150,150,150,150,150,150,150,150,149,147,144,141,137,133,129,123,116,110,107,104,102,102,101,101,101,100,100,100,100],[101,102,105,107,110,115,120,124,129,136,143,149,155,162,168,170,174,176,178,179,181,182,184,184,183,181,180,180,179,177,174,172,170,168,166,165,164,164,164,164,162,160,159,159,158,160,162,164,166,166,163,159,157,156,155,153,151,150,150,150,150,150,150,150,150,150,149,146,143,140,137,133,129,124,119,112,108,105,103,103,102,101,101,101,101,100,100],[102,103,106,108,112,116,121,125,130,138,145,151,157,163,170,174,178,181,181,184,186,186,187,186,184,181,180,180,180,179,178,174,173,173,171,170,170,169,168,167,166,164,163,162,161,164,167,169,170,168,164,160,158,157,155,153,151,150,150,150,150,150,150,150,150,150,147,144,141,138,135,133,128,125,122,116,109,107,104,104,103,102,101,101,101,101,101],[103,105,107,110,114,118,122,127,132,140,146,153,159,165,171,176,180,183,185,186,189,190,188,187,184,182,180,180,180,179,178,176,176,176,176,174,174,173,172,170,168,167,165,163,164,165,169,170,170,170,166,162,159,157,155,153,151,150,150,150,150,150,150,150,150,150,146,142,139,136,133,131,128,125,122,117,110,108,106,105,104,103,103,101,101,101,101],[104,106,108,111,115,119,123,128,134,141,148,154,161,166,172,179,182,184,186,189,190,190,190,187,185,183,180,180,180,179,179,177,176,177,178,178,178,177,176,174,171,168,166,164,166,168,170,170,170,170,168,162,159,157,155,153,151,150,150,150,150,150,150,150,150,148,144,140,137,134,132,129,127,125,122,117,111,110,107,107,106,105,104,103,102,101,100],[104,106,110,114,118,121,125,129,135,142,150,157,162,167,173,180,183,186,188,190,190,190,189,184,183,181,180,179,179,176,177,176,176,177,178,179,180,180,179,177,173,169,167,166,167,169,170,170,170,170,167,161,159,157,155,153,151,150,150,150,150,150,150,149,147,145,141,138,135,133,130,127,125,123,121,118,113,111,110,110,109,109,107,106,105,103,100],[105,107,111,117,121,124,127,131,137,148,154,159,164,168,174,181,184,187,190,191,191,190,187,184,180,178,175,174,172,171,173,173,173,176,178,179,180,180,180,179,175,170,168,166,168,169,170,170,170,170,166,161,158,156,154,153,151,150,150,150,150,148,147,146,145,143,139,135,133,131,129,126,124,121,120,118,114,111,111,111,110,110,109,107,106,104,100],[107,109,113,118,122,126,129,134,139,150,156,160,165,170,175,181,184,188,191,192,192,189,185,181,177,173,171,169,168,167,169,170,172,174,176,178,179,180,180,179,175,170,168,166,166,168,168,170,170,168,164,160,158,155,152,151,150,149,149,148,147,145,144,143,142,141,136,133,130,129,127,125,123,120,119,118,115,112,111,111,111,110,109,109,109,105,100],[107,110,114,117,121,126,130,135,142,151,159,163,167,171,177,182,185,189,192,193,191,187,183,179,174,169,167,166,164,164,165,166,169,171,174,178,179,180,180,178,173,169,166,165,165,166,165,168,169,166,163,159,157,154,152,149,148,147,146,145,143,142,141,140,139,138,133,130,128,127,125,124,122,120,118,117,115,112,111,111,111,111,110,109,108,106,100],[107,110,115,119,123,129,135,141,146,156,161,165,168,173,179,182,186,189,193,194,191,184,179,175,170,166,162,161,160,160,161,162,165,169,172,176,178,179,179,176,172,168,165,163,163,163,163,165,166,164,161,158,155,152,150,147,146,144,143,142,141,139,139,138,137,135,131,128,127,125,124,122,121,119,118,116,115,113,112,111,111,110,110,109,109,105,100],[108,110,114,120,128,134,140,146,152,158,162,166,169,175,180,183,186,189,193,195,190,184,176,171,167,163,160,158,157,156,157,159,163,166,170,174,176,178,178,176,172,167,164,161,161,160,161,163,163,163,160,157,153,150,148,146,144,142,141,140,139,138,136,135,134,133,129,127,126,124,122,121,119,118,117,116,114,113,112,111,110,110,109,109,107,104,100],[108,110,115,121,131,137,142,147,152,159,163,167,170,177,182,184,187,189,192,194,189,183,174,169,165,161,158,156,154,153,154,157,160,164,167,171,172,174,174,173,171,168,161,159,158,158,159,161,161,160,158,155,151,149,147,144,142,141,140,138,137,136,135,134,132,130,128,126,125,123,121,119,118,117,116,115,113,112,112,111,110,109,108,107,105,101,100],[110,111,116,122,129,137,142,146,151,158,164,168,172,179,183,186,189,190,192,193,188,182,174,168,164,161,157,154,151,149,151,154,158,161,167,170,170,170,170,169,168,166,160,157,156,156,157,158,159,159,156,153,150,148,146,144,141,140,140,138,136,135,134,133,131,129,127,125,123,122,120,118,117,116,115,114,112,111,110,108,107,106,105,104,102,100,100],[110,112,118,124,130,136,142,146,151,157,163,168,174,178,183,187,189,190,191,192,189,182,174,168,164,160,157,153,149,148,149,153,157,161,167,170,170,170,168,166,165,163,159,156,154,153,155,155,155,155,152,150,149,147,145,143,141,140,139,138,136,134,133,131,130,128,126,124,122,120,119,117,116,115,114,113,111,110,107,106,105,105,102,101,100,100,100],[110,113,119,125,131,136,141,145,150,158,164,168,172,177,183,187,189,191,192,191,190,183,174,168,164,160,157,153,150,149,150,154,158,162,166,170,170,168,166,164,162,160,158,155,152,151,151,151,151,151,149,148,147,146,145,143,142,140,139,137,135,134,132,131,129,127,125,123,121,119,117,116,114,114,113,112,110,108,107,105,103,100,100,100,100,99,99],[110,114,119,126,131,135,140,144,149,158,164,168,172,176,183,184,189,190,191,191,190,183,174,169,165,161,158,154,150,151,152,155,159,164,168,168,168,167,165,163,160,158,155,153,150,148,148,148,148,148,147,146,146,145,143,142,141,140,139,138,136,134,132,131,128,126,124,122,120,118,116,114,113,113,112,111,108,107,106,105,104,102,100,99,99,99,99],[110,116,121,127,132,136,140,144,148,154,160,166,171,176,180,184,189,190,191,191,191,183,176,170,166,163,159,156,154,155,155,158,161,165,170,167,166,165,163,161,158,155,152,150,146,145,145,145,146,146,144,145,145,144,142,141,140,140,140,140,138,136,134,131,128,125,123,121,119,117,115,113,112,111,111,110,108,106,105,102,100,100,99,99,99,98,98],[110,115,121,127,132,136,140,144,148,151,157,162,169,174,178,181,186,188,190,191,190,184,177,172,168,165,162,159,158,158,159,161,166,167,169,166,164,163,161,159,156,153,149,146,142,142,141,142,143,143,143,143,144,142,141,140,140,140,140,140,140,138,134,131,128,125,123,120,117,116,114,112,110,109,108,107,106,105,102,101,100,99,99,99,98,98,97],[110,114,120,126,131,136,140,143,146,149,154,159,166,171,177,180,182,186,190,190,190,185,179,174,171,168,166,163,164,163,166,169,170,170,168,164,162,161,158,155,153,150,147,143,139,139,139,139,140,141,141,142,142,141,140,140,140,140,140,140,140,137,134,131,128,125,122,119,116,114,112,110,109,109,108,107,105,100,100,100,99,99,99,98,98,97,97],[110,112,118,124,130,135,139,142,145,148,151,157,163,169,172,176,179,183,187,190,190,186,180,177,175,173,170,169,169,170,171,172,170,170,167,163,160,157,154,152,149,147,144,140,137,137,136,137,138,138,139,140,141,140,140,140,140,140,140,140,140,138,134,131,128,124,121,118,115,112,110,109,108,107,106,105,100,100,100,99,99,99,98,98,98,97,97],[108,110,116,122,128,133,137,141,143,146,149,154,161,165,168,172,175,180,184,188,189,187,182,178,176,176,175,173,174,173,175,174,173,171,168,161,157,154,150,148,145,143,141,138,135,135,134,135,135,136,136,137,138,139,140,140,140,140,140,140,140,139,135,130,126,123,120,117,114,111,109,108,107,106,105,100,100,100,99,99,98,98,98,98,97,97,96],[108,110,114,120,126,129,134,139,142,144,146,152,158,161,164,168,171,175,181,184,186,186,183,179,178,178,177,175,178,177,177,176,175,173,168,162,156,153,149,145,142,140,138,136,133,132,132,132,134,134,134,134,135,136,137,138,140,140,140,140,139,137,133,127,123,120,118,115,112,108,108,106,106,105,100,100,100,98,98,98,98,98,98,97,96,96,96],[108,110,112,117,122,126,129,135,139,141,144,149,153,156,160,165,168,171,177,181,184,185,182,180,180,179,178,178,180,179,179,178,176,173,168,163,157,152,148,143,139,137,135,133,131,130,130,131,132,132,132,131,132,132,133,134,136,137,137,137,136,134,131,124,121,118,116,114,111,109,107,106,105,100,100,100,97,97,97,97,97,97,97,96,96,96,96],[107,109,111,116,119,122,125,130,135,137,140,144,148,152,156,161,165,168,172,177,181,184,181,181,181,180,180,180,180,180,180,178,178,173,168,163,158,152,146,141,138,136,134,132,130,129,128,128,130,130,130,129,128,129,129,130,132,133,133,134,134,132,128,122,119,116,114,112,108,106,105,105,100,100,100,97,97,97,97,97,97,97,96,96,96,96,95],[107,108,110,113,115,118,121,126,131,134,137,140,143,148,152,157,162,165,169,173,177,181,181,181,180,181,181,181,180,180,180,178,176,170,167,163,158,152,145,140,137,134,132,130,129,127,127,126,127,128,128,126,125,125,125,123,126,128,129,130,130,125,124,119,116,114,112,110,107,106,105,100,100,100,96,96,96,96,96,96,96,96,96,96,96,95,95],[108,109,110,111,114,116,118,122,127,130,133,136,140,144,148,153,157,161,165,169,173,177,180,180,180,180,181,180,180,180,179,178,173,168,165,161,156,149,143,139,136,133,130,129,128,126,126,125,125,125,125,124,122,121,120,120,120,120,121,122,123,122,120,117,114,111,108,106,105,100,100,100,100,96,96,96,96,96,96,96,96,96,96,96,95,95,95],[108,109,110,110,112,115,116,118,122,125,129,133,137,140,144,149,152,157,161,165,169,173,176,179,179,180,180,180,178,178,176,175,171,165,163,160,153,148,143,139,135,132,129,128,127,125,124,124,123,123,122,122,120,118,117,118,115,117,118,118,119,117,116,115,112,109,107,105,100,100,100,100,97,96,96,96,96,96,96,96,96,96,96,95,95,95,95],[108,109,110,110,110,113,114,116,119,122,126,131,134,138,141,145,149,152,156,160,164,169,171,174,177,175,178,179,177,175,174,172,168,163,160,157,151,147,143,138,133,130,128,125,125,124,123,122,121,121,120,120,118,116,115,111,110,110,110,110,113,114,113,112,110,107,105,102,100,100,100,98,97,96,96,96,96,96,96,96,96,96,96,95,95,95,94],[108,109,109,110,110,111,112,114,117,120,124,128,131,135,138,142,145,149,152,155,158,163,166,167,170,173,175,175,175,173,171,169,164,160,156,153,149,144,140,136,131,129,126,124,123,123,122,121,120,120,120,119,117,115,111,110,110,110,110,110,109,109,110,109,108,106,103,101,100,100,100,98,97,96,96,96,96,96,96,96,96,96,95,95,95,95,94],[108,108,109,109,110,110,110,112,115,118,121,125,128,131,134,138,141,145,147,149,152,157,160,161,163,166,169,170,170,171,168,162,158,155,152,148,144,140,136,132,129,127,124,122,121,120,120,120,120,120,119,117,115,113,110,110,110,110,109,108,108,107,107,106,105,104,102,100,100,100,99,98,97,96,96,96,96,96,96,96,96,96,95,95,95,94,94],[107,108,109,109,110,110,110,112,115,117,119,122,125,127,130,133,137,141,143,145,148,149,152,155,157,159,160,160,161,162,159,156,153,149,146,142,139,134,130,128,126,125,122,120,120,120,119,119,119,118,117,115,113,111,110,110,109,108,107,106,106,105,104,104,103,102,100,100,100,99,99,98,97,96,96,96,96,96,96,96,96,95,95,95,95,94,94],[107,108,109,109,110,110,110,113,115,117,118,119,120,123,126,129,131,134,139,142,144,145,147,148,150,152,154,154,153,154,151,149,146,143,140,136,130,128,126,124,122,121,120,119,118,117,117,117,116,116,115,113,112,110,109,108,107,106,106,105,104,103,102,101,101,100,100,100,100,99,99,98,97,96,96,96,96,96,96,96,96,95,95,95,94,94,94],[107,108,108,109,109,110,111,112,114,115,116,117,118,119,121,125,125,127,131,136,140,141,142,144,144,145,148,149,148,147,146,144,140,138,136,130,127,125,123,121,119,118,117,117,116,116,116,115,114,113,113,111,110,109,108,107,106,105,105,103,103,102,102,102,103,101,100,100,100,99,98,98,97,96,96,96,96,96,96,96,96,95,95,95,94,94,94],[107,107,108,108,109,109,110,110,112,113,114,115,116,117,117,120,120,121,123,129,134,136,138,139,139,139,140,142,142,141,141,140,137,134,131,127,124,122,120,118,117,115,113,114,113,114,114,113,112,111,110,110,109,108,107,106,105,105,105,104,104,104,103,103,103,101,100,100,99,99,98,97,96,96,96,96,96,96,96,96,96,95,95,94,94,94,94],[106,107,107,108,108,108,109,110,110,111,112,113,114,115,114,115,116,116,119,123,125,130,133,134,134,134,134,135,135,136,135,134,132,130,128,124,121,119,118,116,114,112,111,111,111,112,112,111,110,110,110,109,108,108,107,108,107,106,105,104,104,104,103,103,103,102,101,100,99,99,98,97,96,96,96,96,96,96,96,96,95,95,95,94,94,94,94],[106,106,107,107,107,108,109,109,110,110,111,111,112,113,112,111,111,112,115,118,118,119,126,128,128,127,128,128,129,130,129,128,127,125,122,120,118,117,115,114,112,110,110,110,110,110,111,110,110,110,109,109,108,107,106,105,105,105,104,104,104,103,103,102,102,102,101,100,99,99,98,97,96,96,96,96,96,96,96,96,95,95,94,94,94,94,94],[105,106,106,107,107,108,108,109,109,110,110,110,110,111,110,110,110,110,111,114,115,116,121,121,121,121,121,122,123,124,124,123,121,119,118,117,115,114,112,111,110,110,110,110,110,110,109,109,108,109,107,107,106,106,105,105,104,104,104,104,103,103,102,102,102,101,100,100,99,99,98,97,96,96,96,96,96,96,96,96,95,95,94,94,94,94,94],[105,105,106,106,107,107,108,108,109,109,109,109,109,110,110,110,110,110,110,110,111,112,115,115,115,115,115,116,116,117,119,118,117,116,114,113,112,110,110,110,110,110,110,109,109,108,107,106,106,106,106,106,105,105,105,104,104,104,103,103,103,102,102,102,101,100,100,99,99,98,97,97,96,96,96,96,96,96,96,96,95,95,94,94,94,94,94],[104,105,105,106,106,107,107,108,108,108,108,108,108,108,108,108,108,108,108,108,110,110,110,110,110,110,110,111,113,115,116,115,113,112,110,110,110,110,110,110,109,108,108,108,108,107,106,105,105,105,105,105,105,104,104,104,104,103,103,103,102,102,102,101,100,100,100,99,99,98,97,97,96,96,96,96,96,96,96,96,95,95,94,94,94,94,94],[104,104,105,105,106,106,107,107,107,107,107,107,107,106,106,106,106,106,106,108,108,108,106,106,108,109,110,110,112,112,113,112,111,110,110,110,110,109,109,109,108,107,107,107,107,106,106,105,104,104,104,104,104,104,104,103,103,103,103,102,102,101,101,100,100,100,100,99,99,98,97,97,96,96,96,96,96,96,96,95,95,95,94,94,94,94,94],[103,104,104,105,105,106,106,106,107,107,106,106,105,105,104,104,104,104,105,107,107,106,105,105,107,108,109,110,110,110,110,110,110,109,109,109,109,109,109,108,107,107,107,107,106,106,105,104,104,104,104,104,104,104,103,103,103,103,102,102,101,101,100,100,100,100,100,99,98,97,97,96,96,96,96,96,96,96,95,95,95,94,94,94,94,94,94]]
var Dx = [0,1]
var Dy = [0,1]

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Global variables collected here, with NO exceptions

// Define layout variables for each subsection of the display
// These are fixed sizes, they don't change even if the window is resized
// 15" MacBookPro Retina screen is 1440 x 900

// Official abbrevs to be used: y slice area: ysl, x slice area: xsl,
// locator map: map, contour area: con
// The entire area containing all the above is the window,
// use win (the div is 'main')

var winWidth = 1200, // define sizes of windows
    winHeight = 650, // these values determine the aspect ratio of the layout
    conWidth = 0.7*winWidth, // < 90% to allow for padding and gaps
    conHeight = 0.7*winHeight,
    yslWidth = 0.2*winHeight, // ysl_width must equal xsl_height
    yslHeight = conHeight,
    xslWidth = conWidth,
    xslHeight = yslWidth,
    mapWidth = yslWidth*winWidth/winHeight,
    mapHeight = yslWidth;

var gap = 0.075*winHeight, // gap for displaying axis
    lPad = (winWidth - conWidth - gap - mapWidth)/2,
    // this approach ensures centering in main window
    rPad = lPad,
    tPad = (winHeight - conHeight - gap - xslHeight)/2,
    bPad = tPad;

// Define the master global variable for drawing purposes.
// Everything gets appended to this object

var svg = d3.select('#main')
// The full window is appended to #main and named 'svg'.
// This simply defines a variable/window into which we
// can draw, nothing is drawn.
    .append('svg')
    .attr("width", window.innerWidth)
    .attr("height", window.innerHeight)
    // .style('width', winWidth)
    // .style('height',winHeight);

// Initialize xD & yD
// Dx & Dy are the domains passed in by the R function
// Domains are in native units, as supplied by the user
// Defaults via exCon.R are [0,1] unless user provides others

// xD & yD are the brushing coordinates always on [0,1] ????

var xD = Dx,
    yD = Dy;

// Define xF and yF; These are the amplification factors
// which control the vertical scales of the slices, and are set
// by the controls

var xF = 1.0,
    yF = 1.0;

// Define xM and yM, the position of the mouse w/i the contour area
// Need to provide initial values here

var xM = 0.5,
    yM = 0.5;

// Initialize an array with 4 elements which will hold the
// brush extent in fractional units

var brushExtent = [0, 1, 0, 1]

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

var drawOutlines = function() {
    // Outline the areas in which we will draw things

    // svg.append('rect') // outline main window (for troubleshooting, probably not in final version)
    // 	.attr({x: 0, y: 0,
    // 	       width:(winWidth),
    // 	       height: (winHeight),
    // 	       stroke: 'black',
    // 	       'stroke-width': 3,
    // 	       fill:'white'});

    svg.append('rect') // outline contour area
	.attr({x: lPad,
	       y: tPad,
	       width: conWidth,
	       height: conHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill: 'white'});

    svg.append('rect') // outline map area
	.attr({x: lPad + conWidth + gap,
	       y: tPad + conHeight + gap,
	       width: mapWidth,
	       height: mapHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});

    svg.append('rect') // outline x slice
	.attr({x: lPad,
	       y: tPad + conHeight + gap,
	       width: xslWidth,
	       height: xslHeight,
           id: "xViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});

    svg.append('rect') // outline y slice
	.attr({x: lPad + conWidth + gap,
	       y: tPad,
	       width: yslWidth,
	       height: yslHeight,
           id: "yViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});

} // end of drawOutlines

var drawControls = function(){

    // This function draws & activates the control buttons

    // naming: R = global reset button, xR = reset x slice, yR = reset y slice
    // plusX = increase x slice amplification etc

    // button positions
    // Add x or y after button name to specify it's coordinates, e.g. xRx

    var yBut = tPad + conHeight + 0.5*gap,
	xBut = lPad + conWidth + 0.5* gap;
    var butInc = 0.25* yslWidth // spacing w/i the button set
    var butSize = 0.25*gap // radius of the button circle

    var Rx = xBut + 10, // master reset button
	Ry = yBut + 10,
	xRx = xBut, // x slice controls
	xRy = yBut + 0.5*gap + 3*butInc,
	plusXx = xBut,
	plusXy = yBut + 0.5*gap + butInc,
	minusXx = xBut,
	minusXy = yBut + 0.5*gap + 2*butInc,
	yRx =  xBut + 0.5*gap + 3*butInc, // y slice controls
	yRy = yBut,
	plusYx = xBut + 0.5*gap + butInc,
	plusYy = yBut,
	minusYx = xBut + 0.5*gap + 2*butInc,
	minusYy = yBut;

    // Now draw, label and activate all 7 buttons in groups
    // (coordinates with CSS that way)

    var g1 = svg.append("g")

    g1.append('circle') // master reset button
	    .attr({cx: Rx, cy: Ry, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetAll()" })

    g1.append('text') // master reset button
	    .attr({x: Rx, y: Ry + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
	    .attr({onclick: "resetAll()" })
        .text('R')

    g1.append('circle') // x slice reset button
	    .attr({cx: xRx, cy: xRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetXslice()" })

    g1.append('text') // x slice reset button
	    .attr({x: xRx, y: xRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetXslice()" })
        .text('R')

    g1.append('circle') // y slice reset button
	    .attr({cx: yRx, cy: yRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetYslice()" })

    g1.append('text') // y slice reset button
	    .attr({x: yRx, y: yRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetYslice()" })
        .text('R')

    var g2 = svg.append("g")

    g2.append('circle') // x slice increase button
	    .attr({cx: plusXx, cy: plusXy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseXslice()" })

    g2.append('text') // x slice increase button
	    .attr({x: plusXx, y: plusXy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseXslice()" })
        .text('+')

    g2.append('circle') // y slice increase button
	    .attr({cx: plusYx, cy: plusYy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseYslice()" })

    g2.append('text') // y slice increase button
	    .attr({x: plusYx, y: plusYy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseYslice()" })
        .text('+')

    var g3 = svg.append("g")

    g3.append('circle') // x slice decrease button
	    .attr({cx: minusXx, cy: minusXy, r: butSize, text: '-'})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseXslice()" })

    g3.append('text') // x slice decrease button
	    .attr({x: minusXx, y: minusXy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseXslice()" })
        .text('-')

    g3.append('circle') // y slice decrease button
	    .attr({cx: minusYx, cy: plusYy, r: butSize})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseYslice()" })

    g3.append('text') // y slice decrease button
	    .attr({x: minusYx, y: plusYy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseYslice()" })
        .text('-')

} // end of drawControls

var resetAll = function() {
    clearBrush();
    clearContour();
    drawContour(Dx,Dy);
    resetXslice();
    resetYslice();
    brushExtent = [0, 1, 0, 1]
}

var resetXslice = function() {
    yF = 1.0

    if (mY == 0 || mY == 1) {
        clearXslice()
    } else {
        drawXslice(getRowIndex(M, mY))
    }
}

var resetYslice = function() {
    xF = 1.0

    if (mX ==0 || mX == 1) {
        clearYslice()
    } else {
        drawYslice(getColIndex(M, mX))
    }
}

var increaseXslice = function() {
    yF = yF / 2
}

var decreaseXslice = function() {
    yF = yF * 2
}

var increaseYslice = function() {
    xF = xF / 2
}

var decreaseYslice = function() {
    xF = xF * 2
}

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Note: our map and contour areas are frequently referred to
// generically as context and focus regions in the d3 world

// xD & yD are global variables

var drawContour = function(xD, yD) { // draw the contour map
    var xContour = d3.scale.linear() // x limits for contour map
    	.domain(xD)
    	.range([0, conWidth]);
    var yContour = d3.scale.linear() // y limits for contour map
    	.domain(yD)
    	.range([conHeight, 0]);
    var lineCon = d3.svg.line()
    	.x(function(d) { return xContour(d.x); })
    	.y(function(d) { return yContour(d.y); });
    var contour = svg.append("svg")
    	.attr({x: lPad,
    	       y: tPad,
    	       width: conWidth,
    	       height: conHeight,
    	       "class": "contour",
    	       "id": "CON"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineCon)

    drawXaxis(xContour);
    drawYaxis(yContour);

} // end of drawContour


var drawXaxis = function(xScale) {
    d3.select("#X_axis").remove(); // remove existing axis
    var xAxis = d3.svg.axis()
    	.scale(xScale)
    	.orient("bottom");

    svg.append("g")
    	.attr("id", "X_axis")
    	.attr("class", "axis")
    // the math portion below must be in parens
    // the math is evaluated and '+' concatenates the strings
	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
	.attr("transform", "translate(" + lPad + "," +
        (tPad + conHeight + 0.1*gap) + ")")
	.call(xAxis);
}

var drawYaxis = function(yScale) {
    d3.select("#Y_axis").remove();
    var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("right");

    svg.append("g")
    	.attr("id", "Y_axis")
    	.attr("class", "axis")
    	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
    	.attr("transform", "translate(" + (lPad + conWidth + 0.1*gap) + "," +
            (tPad) + ")")
    	.call(yAxis);
}


var clearContour = function() {
    d3.select("#CON").remove();
}

var drawMap = function() { // draw the navigation map in the map space
    var xMap = d3.scale.linear() // x limits for corner map
    	.domain(Dx)
    	.range([0, mapWidth]);
    var yMap = d3.scale.linear() // y limits for corner map
    	.domain(Dy)
    	.range([mapHeight, 0]);
    var lineMap = d3.svg.line()
    	.x(function(d) { return xMap(d.x); })
    	.y(function(d) { return yMap(d.y); });
    var map = svg.append("svg")
    	.attr({x: lPad + conWidth + gap,
    	       y: tPad + conHeight + gap,
    	       "class": "map"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineMap)
} // end of drawMap


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Brush related functions

var activateBrush = function() {
    // Creates the brush, appends it, and defines its behavior

    // IMPORTANT: xD & yD are global variables

    var brush = d3.svg.brush()
    // Defines the brush, and calls the relevant functions
	.x(d3.scale.identity().domain([(lPad + conWidth + gap),
        (lPad + conWidth + gap + mapWidth)]))
	.y(d3.scale.identity().domain([(tPad + conHeight + gap),
        (tPad + conHeight + gap + mapHeight)]))
	.on("brushend", brushed)

    svg.append("svg") // Appends the svg to include the brush
	.attr("class", "brush")
	.call(brush)

    // brushed = function() { // doesn't work
    // var brushed = function() { // doesn't work
    function brushed() { // Handles the response to brushing

    	var extent = brush.extent() // reports in pixels
    	var minX = extent[0][0]
    	var maxX = extent[1][0]
    	var minY = extent[0][1]
    	var maxY = extent[1][1]
    	var x0 = lPad + conWidth + gap // dim of map region
    	var y0 = tPad + conHeight + gap
    	var x1 = x0 + mapWidth
    	var y1 = y0 + mapHeight
    	var xL = ((minX-x0)/(x1-x0)) // as a frac of map region
    	var xU =  ((maxX-x0)/(x1-x0))
    	var yL = ((minY-y0)/(y1-y0))
    	var yU =  ((maxY-y0)/(y1-y0))
        var spanX = Dx[1] - Dx[0]
        var spanY = Dy[1] - Dy[0]
        // update global values
    	xD = [((spanX*xL) + Dx[0]), ((spanX*xU) + Dx[0])]
        // yD is more complex since the reference point is the top of the screen
        yD = [(spanY*(1-yU) + Dy[0]), (spanY*(1-yL) + Dy[0])]
        // save the extent in fraction units, needed by
        // the row counter in eC_slices.js
        // reference point 0,0 is lower left
        brushExtent = [xL, xU, 1-yU, 1-yL] // global variable
    	clearContour();
    	drawContour(xD, yD);
    } // end of brushed

} // end of activateBrush

var clearBrush = function() {
    d3.selectAll(".brush").remove();
    xD = Dx; // reset global variables
    yD = Dy;
    activateBrush();
}

// Guide & slice related functions.  Note that these need to
// respond to brushing, which changes xD and yD

// Now the create the guides that will control the slices

var activateGuides = function() {

    // Controls the guides (cursor) in the contour area
    // AND ultimately the slicing process which depends
    // on the cursor position

    // IMPORTANT: xD, yD, xF, yF, xM, yM are global variables

    var getMouseXY = function() {
    // get the mouse coordinates & report in terms of [0...1]
    	var mouse = d3.mouse(document.getElementById("CON"));
    	mX = mouse[0]; // in pixels
    	mY = mouse[1];
    	if (mX < 0) {mX = 0}; // truncate low
    	if (mY < 0) {mY = 0};
    	if (mX > conWidth) {mX = conWidth}; // truncate high
    	if (mY > conHeight) {mY = conHeight};
    	mX = mX/conWidth // as fraction
    	mY = 1 - (mY/conHeight)
    	followMouse(mX, mY);
    	document.Show.mouseX.value = mX;
    	document.Show.mouseY.value = mY;

        if (mY <= 0.01 || mY >= 0.99) {
            clearXslice()
        } else {
            var row = getRowIndex(M, mY)
            drawXslice(row)
        }

        if (mX <= 0.01 || mX >= 0.99) {
            clearYslice()
        } else {
            var col = getColIndex(M, mX)
            drawYslice(col)
        }

        // if (mY == 0 || mY == 1) {
        //     clearXslice()
        // } else {
        //     var row = getRowIndex(M, mY)
    	//     drawXslice(row)
        // }
        //
        // if (mX == 0 || mX == 1) {
        //     clearYslice()
        // } else {
        //     var col = getColIndex(M, mX)
	    //     drawYslice(col)
        // }

    } // end of getMouseXY

    var followMouse = function(mX, mY) { // This draws the guides, nothing else

        var xPos = (mX * conWidth) + lPad // mX now in pixels
    	var yPos = tPad + conHeight - (mY * conHeight) // mY now in pixels

    	var vertU = {x: xPos, y: tPad } // x, y at the top of window
        // x, y at the bottom of window:
    	var vertL = {x: xPos, y: tPad + conHeight }
    	var vEnds = [vertU, vertL];

    	var horzU = {x: lPad, y: yPos } // x, y at the left side of window
        // x, y at the right side of window:
    	var horzL = {x: lPad + conWidth, y: yPos }
    	var hEnds = [horzU, horzL];

    	d3.selectAll(".cursorGuide") // remove previous lines
    	    .remove();

    	var line = d3.svg.line()
    	    .x(function(d) { return d.x;})
    	    .y(function(d) { return d.y;})

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(hEnds))

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(vEnds))

    } // end of followMouse

    getMouseXY(xD, yD); // This starts it all off

} // end of activateGuides


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Slice related functions. Note that these need to respond to brushing,
// which changes xD and yD

// A helper function first

var arraySize = function(array) { // merged from several SO post ideas
	// js is row-major
	// assumes 2D array
	// assumes each row has the same length (= no. of columns)
	var nrows = array.length
	var ncols = array[0].length // length of first row
	return [nrows, ncols]
}


var getXsliceLimits = function() {

	// This function gets the left & right edge indices
	// starting from native units (ie Dx, Dx units) ????
	// and taking brushing into account.
	// Answer in terms of column indices
	var nc = arraySize(M)[1];
	var left = Math.floor(brushExtent[0]*nc);
	var right = Math.ceil(brushExtent[1]*nc);
	if (left < 1) left = 1 // Compensate for rounding
	if (right > nc) right = nc
	return [left, right];
} // end of getXsliceLimits


var getXsliceXvalues = function() {

	// This function creates the x values needed for the x slice
	// These are a selection of the column numbers

	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	// console.log(lIndex)
	// console.log(rIndex)
	var nc = arraySize(M)[1];
	var xbase = d3.range(1, nc + 1);
	var xdata = xbase.slice(lIndex, rIndex + 1);
	return xdata;

} // end of getXsliceXvalues


var getXsliceYvalues = function(row) {

	// This function creates the y values needed for the x slice
	// See getXsliceLimits for logic & comments
	var ybase = M[row]; // the y values in the row
	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	var ydata = ybase.slice(lIndex, rIndex + 1);
	return ydata;
} // end of getXsliceYvalues


var getRowIndex = function(M, mY) { // do we need to specify the args?

	// See getColIndex for more comments
	// IMPORTANT: reference point for brushing extent is lower left corner!
	var yNat = yD[0] + ((mY) * (yD[1] - yD[0]))
	document.Show.mouseYnat.value = yNat
	var nRow = arraySize(M)[0]
	var nRowAdj = nRow*(brushExtent[3]-brushExtent[2])
	var yInd = (mY*nRowAdj + nRow*brushExtent[2])
	yInd = Math.round(yInd);
	document.Show.mouseRow.value = yInd;
	return(yInd);
} // end of getRowIndex

var clearXslice = function() {
	d3.selectAll(".xslice")
		.remove();
}

var drawXslice = function(row) {

	// WARNING: the matrix data has the columns in the correct order
	// However, row 1 of the M matrix is at the bottom of the display
	// and js counts from the top of the svg

	// Start by removing any existing xslice and associated clipping elements.
	d3.selectAll(".xslice")
	    .remove();
	d3.selectAll(".xViewport")
		.remove();
	d3.selectAll("#xClipBox")
		.remove();
	// d3.selectAll("defs") // w/o this empty tags accumulate
	// 	.remove();

	var xdata = getXsliceXvalues();
	var ydata = getXsliceYvalues(row);
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < xdata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

	var xscl = d3.scale.linear()
	    .domain(d3.extent(xy, function(d) {return d.x;})) //use just the x part
	    .range([0, xslWidth])

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var yscl = d3.scale.linear()
        .domain([minM, ((maxM - minM)*yF + minM)])
	    .range([xslHeight-5, 5]) // keeps line from touching outline

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);}) // apply the x scale to the x data
	    .y(function(d) { return yscl(d.y);}) // apply the y scale to the y data

	// This approach permits re-use of #xViewport (defined in eC_controls.js)

	var clip = svg.append("defs").append("clipPath")
   	  .attr("id", "xClipBox")

	clip.append("use").attr("xlink:href", "#xViewport");

	var xSlice = svg.append("g")
		.attr("clip-path", "url(#xClipBox)")
		.attr("class", "xViewport") // needs a class to be able to clear

	xSlice.append("path")
		.attr("transform", "translate(" + lPad + ","
			+ (tPad + conHeight + gap) + ")")
		.attr({width: xslWidth,
			height: xslHeight,
			"class": "line",
			"class": "xslice",
			"d": slice(xy)}) // use the return value of slice(xy) as 'd'

} // end of drawXslice


// ----- Now everything related to the y slice -----

var getYsliceLimits = function() {

	// See notes in getXsliceLimits
	var nr = arraySize(M)[0];
	var bottom = Math.floor(brushExtent[2]*nr);
	var top = Math.ceil(brushExtent[3]*nr);
	if (bottom < 1) bottom = 1
	if (top > nr) top = nr
	return [bottom, top];
    } // end of getYsliceLimits


var getYsliceYvalues = function() {

	// This function creates the y values (actual data) needed for the y slice

	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	var nr = arraySize(M)[0];
	var ybase = d3.range(1, nr+1);
	var ydata = ybase.slice(bIndex, tIndex +1);
	return ydata;
}


var getYsliceXvalues = function(col){
	var xdata = []; // Get just the column of interest
	var nr = arraySize(M)[0];
	for (var i = 0; i < nr; i++){
	    xdata.push(M[i][col]);
	}
	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	xdata = xdata.slice(bIndex, tIndex + 1);
	return xdata;
}


var getColIndex = function(M, mX) {

	// Report the mouse position in native coordinates

	var xNat = xD[0] + ((mX) * (xD[1] - xD[0]))
	document.Show.mouseXnat.value = xNat

	// Report the mouse position as a column

	var nCol = arraySize(M)[1] // No. rows in the original matrix
	// Adjust no. cols to acct for brushing
	nColAdj = nCol*(brushExtent[1]-brushExtent[0])
	var xInd = nCol*brushExtent[0] + mX*nColAdj
	xInd = Math.round(xInd);
	document.Show.mouseCol.value = xInd;
	return(xInd);
} // end of getColIndex

var clearYslice = function() {
	d3.selectAll(".yslice")
		.remove();
}

var drawYslice = function(col) {

	// The Y slice is the slice parallel to the y direction
	// See drawXslice for additional detailed comments

	d3.selectAll(".yslice")
	    .remove();
	d3.selectAll(".yViewport")
		.remove();
	d3.selectAll("#yClipBox")
		.remove();
	// d3.selectAll("defs")
	// 	.remove();

    // Important: on the Y slice, the x values are the column slice,
    // and the y values are the row numbers (since the plot is rotated 90)

	var xdata = getYsliceXvalues(col);
	var ydata = getYsliceYvalues();
	// Because of how the x data is referenced (top is 0),
	// we need to reverse it
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < ydata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var xscl = d3.scale.linear()
	    .domain([minM, ((maxM - minM)*xF + minM)])
		// range is set so the top of the peaks point toward the contour area
	    .range([yslWidth-5, 5])

	var yscl = d3.scale.linear()
		.domain(d3.extent(xy, function(d) {return d.y;}))
	    .range([yslHeight + tPad, tPad])

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);})
	    .y(function(d) { return yscl(d.y);})

	var clip = svg.append("defs").append("clipPath")
		.attr("id", "yClipBox")

	clip.append("use").attr("xlink:href", "#yViewport");

	var ySlice = svg.append("g")
		.attr("clip-path", "url(#yClipBox)")
		.attr("class", "yViewport")

	ySlice.append("path")
		.attr("transform", "translate(" + (lPad + conWidth + gap)
			+ "," + (0) + ")")
		.attr({width: yslWidth,
			height: yslHeight,
			"class": "line",
			"class": "yslice",
			"d": slice(xy)})

} // end of drawYslice

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// These function calls return nothing: they draw something, or define behaviors
// All cause things to be appended to global variable 'svg'
// defined in eC_globals.js
// Many modify or use the key global variables xD, yD, xF, yF

drawOutlines(); // Appends rectangles outlining the areas we'll be using.
drawControls();
drawMap(); // Appends an svg:path object (the contour lines)
// and draws them in the map region.

// On first run, draw the full domain in the contour area:
drawContour(xD,yD); // Works as drawMap does, just in a different region.

// These next two control behaviors and depend on xD & yD
activateBrush(); // Handles all the brush tasks
svg.on('mousemove', activateGuides); // Controls mouse behavior &
// drawing of slices
