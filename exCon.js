var CL = [ { "level" : [ 20 ], "x" : [ 5.38, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.37, 5.38, 5.42, 5.46, 5.49, 5.53, 5.57, 5.61, 5.65, 5.68, 5.72, 5.76, 5.8, 5.84, 5.87, 5.91, 5.95, 5.99, 6.03, 6.06, 6.1, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.11, 6.1, 6.06, 6.03, 5.99, 5.95, 5.91, 5.87, 5.84, 5.8, 5.76, 5.72, 5.68, 5.65, 5.61, 5.57, 5.53, 5.49, 5.46, 5.42, 5.38 ], "y" : [ 6.31, 6.32, 6.35, 6.39, 6.42, 6.45, 6.48, 6.52, 6.55, 6.58, 6.61, 6.65, 6.68, 6.71, 6.74, 6.77, 6.81, 6.84, 6.87, 6.9, 6.94, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.95, 6.94, 6.9, 6.87, 6.84, 6.81, 6.77, 6.74, 6.71, 6.68, 6.65, 6.61, 6.58, 6.55, 6.52, 6.48, 6.45, 6.42, 6.39, 6.35, 6.32, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31, 6.31 ] }, { "level" : [ 20 ], "x" : [ 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.91, 5.95, 5.99, 6.03, 6.06, 6.1, 6.14, 6.18, 6.22, 6.25, 6.29, 6.33, 6.37, 6.41, 6.44, 6.48, 6.52, 6.56, 6.59, 6.63, 6.67, 6.71, 6.75, 6.78, 6.82, 6.86, 6.9, 6.94, 6.97, 7.01, 7.05, 7.09, 7.13, 7.16, 7.2, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.2, 7.16, 7.13, 7.09, 7.05, 7.01, 6.97, 6.94, 6.9, 6.86, 6.82, 6.78, 6.75, 6.71, 6.67, 6.63, 6.59, 6.56, 6.52, 6.48, 6.44, 6.41, 6.37, 6.33, 6.29, 6.25, 6.22, 6.18, 6.14, 6.1, 6.06, 6.03, 5.99, 5.95, 5.91 ], "y" : [ 7.1, 7.1, 7.13, 7.16, 7.19, 7.23, 7.26, 7.29, 7.32, 7.35, 7.39, 7.42, 7.45, 7.48, 7.52, 7.55, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.58, 7.55, 7.52, 7.48, 7.45, 7.42, 7.39, 7.35, 7.32, 7.29, 7.26, 7.23, 7.19, 7.16, 7.13, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1, 7.1 ] }, { "level" : [ 20 ], "x" : [ 6.67, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.65, 6.67, 6.71, 6.75, 6.78, 6.82, 6.86, 6.9, 6.94, 6.97, 7.01, 7.05, 7.09, 7.13, 7.16, 7.2, 7.24, 7.28, 7.32, 7.35, 7.39, 7.43, 7.47, 7.51, 7.54, 7.58, 7.62, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.65, 7.62, 7.58, 7.54, 7.51, 7.47, 7.43, 7.39, 7.35, 7.32, 7.28, 7.24, 7.2, 7.16, 7.13, 7.09, 7.05, 7.01, 6.97, 6.94, 6.9, 6.86, 6.82, 6.78, 6.75, 6.71, 6.67 ], "y" : [ 8.2, 8.23, 8.26, 8.29, 8.32, 8.35, 8.39, 8.42, 8.45, 8.48, 8.52, 8.55, 8.58, 8.61, 8.65, 8.68, 8.71, 8.74, 8.77, 8.81, 8.84, 8.87, 8.9, 8.94, 8.97, 9, 9.03, 9.06, 9.1, 9.13, 9.16, 9.19, 9.23, 9.26, 9.29, 9.32, 9.35, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.38, 9.35, 9.32, 9.29, 9.26, 9.23, 9.19, 9.16, 9.13, 9.1, 9.06, 9.03, 9, 8.97, 8.94, 8.9, 8.87, 8.84, 8.81, 8.77, 8.74, 8.71, 8.68, 8.65, 8.61, 8.58, 8.55, 8.52, 8.48, 8.45, 8.42, 8.39, 8.35, 8.32, 8.29, 8.26, 8.23, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2, 8.2 ] }, { "level" : [ 40 ], "x" : [ 6.29, 6.28, 6.28, 6.28, 6.28, 6.28, 6.28, 6.29, 6.33, 6.37, 6.41, 6.44, 6.48, 6.52, 6.56, 6.59, 6.63, 6.67, 6.71, 6.75, 6.78, 6.82, 6.86, 6.87, 6.87, 6.87, 6.87, 6.87, 6.87, 6.86, 6.82, 6.78, 6.75, 6.71, 6.67, 6.63, 6.59, 6.56, 6.52, 6.48, 6.44, 6.41, 6.37, 6.33, 6.29 ], "y" : [ 7.25, 7.26, 7.29, 7.32, 7.35, 7.39, 7.42, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.42, 7.39, 7.35, 7.32, 7.29, 7.26, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25, 7.25 ] }, { "level" : [ 40 ], "x" : [ 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.86, 6.9, 6.94, 6.97, 7.01, 7.05, 7.09, 7.13, 7.16, 7.2, 7.24, 7.28, 7.32, 7.35, 7.39, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.43, 7.39, 7.35, 7.32, 7.28, 7.24, 7.2, 7.16, 7.13, 7.09, 7.05, 7.01, 6.97, 6.94, 6.9, 6.86 ], "y" : [ 8.39, 8.39, 8.42, 8.45, 8.48, 8.52, 8.55, 8.58, 8.61, 8.65, 8.68, 8.71, 8.74, 8.77, 8.81, 8.84, 8.87, 8.9, 8.94, 8.97, 9, 9.03, 9.06, 9.1, 9.13, 9.16, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.19, 9.16, 9.13, 9.1, 9.06, 9.03, 9, 8.97, 8.94, 8.9, 8.87, 8.84, 8.81, 8.77, 8.74, 8.71, 8.68, 8.65, 8.61, 8.58, 8.55, 8.52, 8.48, 8.45, 8.42, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39, 8.39 ] }, { "level" : [ 60 ], "x" : [ 6.41, 6.39, 6.39, 6.41, 6.44, 6.48, 6.52, 6.56, 6.58, 6.58, 6.56, 6.52, 6.48, 6.44, 6.41 ], "y" : [ 7.31, 7.32, 7.35, 7.37, 7.37, 7.37, 7.37, 7.37, 7.35, 7.32, 7.31, 7.31, 7.31, 7.31, 7.31 ] }, { "level" : [ 60 ], "x" : [ 7.24, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.22, 7.24, 7.28, 7.32, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.34, 7.32, 7.28, 7.24 ], "y" : [ 8.53, 8.55, 8.58, 8.61, 8.65, 8.68, 8.71, 8.74, 8.77, 8.81, 8.84, 8.87, 8.89, 8.89, 8.89, 8.87, 8.84, 8.81, 8.77, 8.74, 8.71, 8.68, 8.65, 8.61, 8.58, 8.55, 8.53, 8.53, 8.53 ] }, { "level" : [ 80 ], "x" : [ 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.24, 7.28, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.32, 7.28, 7.24 ], "y" : [ 8.55, 8.55, 8.58, 8.61, 8.65, 8.68, 8.71, 8.74, 8.77, 8.81, 8.84, 8.87, 8.87, 8.87, 8.87, 8.87, 8.84, 8.81, 8.77, 8.74, 8.71, 8.68, 8.65, 8.61, 8.58, 8.55, 8.55, 8.55, 8.55 ] } ]
var M = [ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 70, 70, 70, 70, 70, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 70, 70, 70, 70, 70, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 80, 80, 80, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ] ]
var Dx = [ 5, 8 ]
var Dy = [ 6, 10 ]

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Global variables collected here, with NO exceptions

// Define layout variables for each subsection of the display
// These are fixed sizes, they don't change even if the window is resized
// 15" MacBookPro Retina screen is 2880 x 1800, non-Retina is 1440 x 900

// Official abbrevs to be used: y slice area: ysl, x slice area: xsl,
// locator map: map, contour area: con
// The entire area containing all the above is the window,
// use win (the div is 'main')

var winWidth = 1200, // define sizes of windows
    winHeight = 650, // these values determine the aspect ratio of the layout
    conWidth = 0.7*winWidth, // < 90% to allow for padding and gaps
    conHeight = 0.7*winHeight,
    yslWidth = 0.2*winHeight, // ysl_width must equal xsl_height
    yslHeight = conHeight,
    xslWidth = conWidth,
    xslHeight = yslWidth,
    mapWidth = yslWidth*winWidth/winHeight,
    mapHeight = yslWidth;

var gap = 0.075*winHeight, // gap for displaying axis
    lPad = (winWidth - conWidth - gap - mapWidth)/2,
    // this approach ensures centering in main window
    rPad = lPad,
    tPad = (winHeight - conHeight - gap - xslHeight)/2,
    bPad = tPad;

// Define the master global variable for drawing purposes.
// Everything gets appended to this object

var svg = d3.select('#main')
// The full window is appended to #main and named 'svg'.
// This simply defines a variable/window into which we
// can draw, nothing is drawn.
    .append('svg')
    .attr("width", window.innerWidth)
    .attr("height", window.innerHeight)
    // .style('width', winWidth)
    // .style('height',winHeight);

// Initialize xD & yD
// Dx & Dy are the domains passed in by the function
// Domains are in native units, as supplied by the user
// Defaults via exCon.R are [0,1]
// xD & yD are the brushing coordinates

var xD = Dx,
    yD = Dy;

// Define xF and yF; These are the amplification factors
// which control the vertical scales of the slices, and are set
// by the controls

var xF = 1.0,
    yF = 1.0;

// Define xM and yM, the position of the mouse w/i the contour area
// Need to provide initial values here

var xM = 0.5,
    yM = 0.5;

// Initialize an array with 4 elements which will hold the
// brush extent in fractional units

var brushExtent = [0, 1, 0, 1]

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

var drawOutlines = function() {
    // Outline the areas in which we will draw things

    // svg.append('rect') // outline main window (for troubleshooting, probably not in final version)
    // 	.attr({x: 0, y: 0,
    // 	       width:(winWidth),
    // 	       height: (winHeight),
    // 	       stroke: 'black',
    // 	       'stroke-width': 3,
    // 	       fill:'white'});
    svg.append('rect') // outline contour area
	.attr({x: lPad,
	       y: tPad,
	       width: conWidth,
	       height: conHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill: 'white'});
    svg.append('rect') // outline map area
	.attr({x: lPad + conWidth + gap,
	       y: tPad + conHeight + gap,
	       width: mapWidth,
	       height: mapHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});
    svg.append('rect') // outline x slice
	.attr({x: lPad,
	       y: tPad + conHeight + gap,
	       width: xslWidth,
	       height: xslHeight,
           id: "xViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});
    svg.append('rect') // outline y slice
	.attr({x: lPad + conWidth + gap,
	       y: tPad,
	       width: yslWidth,
	       height: yslHeight,
           id: "yViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});

} // end of drawOutlines

var drawControls = function(){

    // This function draws & activates the control buttons

    // naming: R = global reset button, xR = reset x slice, yR = reset y slice
    // plusX = increase x slice amplification etc

    // button positions
    // Add x or y after button name to specify it's coordinates, e.g. xRx

    var yBut = tPad + conHeight + 0.5*gap,
	xBut = lPad + conWidth + 0.5* gap;
    var butInc = 0.25* yslWidth // spacing w/i the button set
    var butSize = 0.25*gap // radius of the button circle

    var Rx = xBut + 10, // master reset button
	Ry = yBut + 10,
	xRx = xBut, // x slice controls
	xRy = yBut + 0.5*gap + 3*butInc,
	plusXx = xBut,
	plusXy = yBut + 0.5*gap + butInc,
	minusXx = xBut,
	minusXy = yBut + 0.5*gap + 2*butInc,
	yRx =  xBut + 0.5*gap + 3*butInc, // y slice controls
	yRy = yBut,
	plusYx = xBut + 0.5*gap + butInc,
	plusYy = yBut,
	minusYx = xBut + 0.5*gap + 2*butInc,
	minusYy = yBut;

    // Now draw, label and activate all 7 buttons in groups
    // (coordinates with CSS that way)

    var g1 = svg.append("g")
//        .attr({id: "resetButton"})

    g1.append('circle') // master reset button
	    .attr({cx: Rx, cy: Ry, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetAll()" })
//        .text('R')
    g1.append('text') // master reset button
	    .attr({x: Rx, y: Ry + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
	    .attr({onclick: "resetAll()" })
        .text('R')

    g1.append('circle') // x slice reset button
	    .attr({cx: xRx, cy: xRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetXslice()" })
    g1.append('text') // x slice reset button
	    .attr({x: xRx, y: xRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetXslice()" })
        .text('R')

    g1.append('circle') // y slice reset button
	    .attr({cx: yRx, cy: yRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetYslice()" })
    g1.append('text') // y slice reset button
	    .attr({x: yRx, y: yRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetYslice()" })
        .text('R')

    var g2 = svg.append("g")
//        .attr({id: "incButton"})

    g2.append('circle') // x slice increase button
	    .attr({cx: plusXx, cy: plusXy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseXslice()" })
    g2.append('text') // x slice increase button
	    .attr({x: plusXx, y: plusXy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseXslice()" })
        .text('+')

    g2.append('circle') // y slice increase button
	    .attr({cx: plusYx, cy: plusYy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseYslice()" })
    g2.append('text') // y slice increase button
	    .attr({x: plusYx, y: plusYy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseYslice()" })
        .text('+')

    var g3 = svg.append("g")
//        .attr({id: "decButton"})

    g3.append('circle') // x slice decrease button
	    .attr({cx: minusXx, cy: minusXy, r: butSize, text: '-'})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseXslice()" })
    g3.append('text') // x slice decrease button
	    .attr({x: minusXx, y: minusXy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseXslice()" })
        .text('-')

    g3.append('circle') // y slice decrease button
	    .attr({cx: minusYx, cy: plusYy, r: butSize})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseYslice()" })
    g3.append('text') // y slice decrease button
	    .attr({x: minusYx, y: plusYy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseYslice()" })
        .text('-')

} // end of drawControls

var resetAll = function() {
    clearBrush();
    clearContour();
    drawContour(Dx,Dy);
    resetXslice();
    resetYslice();
    brushExtent = [0, 1, 0, 1]
}

var resetXslice = function() {
    yF = 1.0

    if (mY == 0 || mY == 1) {
        clearXslice()
    } else {
        drawXslice(getRowIndex(M, mY))
    }
    //
    // if (mX ==0 || mX == 1) {
    //     clearYslice()
    // } else {
    //     drawYslice(getColIndex(M, mX))
    // }
    //
    // drawXslice(getRowIndex(M, mY))
}

var resetYslice = function() {
    xF = 1.0

// if (mY == 0 || mY == 1) {
//     clearXslice()
// } else {
//     drawXslice(getRowIndex(M, mY))
// }

    if (mX ==0 || mX == 1) {
        clearYslice()
    } else {
        drawYslice(getColIndex(M, mX))
    }

    // drawYslice(getColIndex(M, mX))
}

var increaseXslice = function() {
    yF = yF / 2
}

var decreaseXslice = function() {
    yF = yF * 2
}

var increaseYslice = function() {
    xF = xF / 2
}

var decreaseYslice = function() {
    xF = xF * 2
}

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Note: our map and contour areas are frequently referred to
// generically as context and focus regions in the d3 world

// xD & yD are global variables

var drawContour = function(xD, yD) { // draw the contour map
    var xContour = d3.scale.linear() // x limits for contour map
    	.domain(xD)
    	.range([0, conWidth]);
    var yContour = d3.scale.linear() // y limits for contour map
    	.domain(yD)
    	.range([conHeight, 0]);
    var lineCon = d3.svg.line()
    	.x(function(d) { return xContour(d.x); })
    	.y(function(d) { return yContour(d.y); });
    var contour = svg.append("svg")
    	.attr({x: lPad,
    	       y: tPad,
    	       width: conWidth,
    	       height: conHeight,
    	       "class": "contour",
    	       "id": "CON"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineCon)

    drawXaxis(xContour);
    drawYaxis(yContour);

} // end of drawContour


var drawXaxis = function(xScale) {
    d3.select("#X_axis").remove(); // remove existing axis
    var xAxis = d3.svg.axis()
    	.scale(xScale)
    	.orient("bottom");

    svg.append("g")
    	.attr("id", "X_axis")
    	.attr("class", "axis")
    // the math portion below must be in parens
    // the math is evaluated and '+' concatenates the strings
	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
	.attr("transform", "translate(" + lPad + "," +
        (tPad + conHeight + 0.1*gap) + ")")
	.call(xAxis);
}

var drawYaxis = function(yScale) {
    d3.select("#Y_axis").remove();
    var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("right");

    svg.append("g")
    	.attr("id", "Y_axis")
    	.attr("class", "axis")
    	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
    	.attr("transform", "translate(" + (lPad + conWidth + 0.1*gap) + "," +
            (tPad) + ")")
    	.call(yAxis);
}


var clearContour = function() {
    d3.select("#CON").remove();
}

var drawMap = function() { // draw the navigation map in the map space
    var xMap = d3.scale.linear() // x limits for corner map
    	.domain(Dx)
    	.range([0, mapWidth]);
    var yMap = d3.scale.linear() // y limits for corner map
    	.domain(Dy)
    	.range([mapHeight, 0]);
    var lineMap = d3.svg.line()
    	.x(function(d) { return xMap(d.x); })
    	.y(function(d) { return yMap(d.y); });
    var map = svg.append("svg")
    	.attr({x: lPad + conWidth + gap,
    	       y: tPad + conHeight + gap,
    	       "class": "map"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineMap)
} // end of drawMap


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Brush related functions

function activateBrush() {
    // Creates the brush, appends it, and defines its behavior

    // IMPORTANT: xD & yD are global variables

    var brush = d3.svg.brush()
    // Defines the brush, and calls the relevant functions
	.x(d3.scale.identity().domain([(lPad + conWidth + gap),
        (lPad + conWidth + gap + mapWidth)]))
	.y(d3.scale.identity().domain([(tPad + conHeight + gap),
        (tPad + conHeight + gap + mapHeight)]))
	.on("brushend", brushed)

    svg.append("svg") // Appends the svg to include the brush
	.attr("class", "brush")
	.call(brush)

    function brushed() { // Handles the response to brushing
    	var extent = brush.extent() // reports in pixels
    	var minX = extent[0][0]
    	var maxX = extent[1][0]
    	var minY = extent[0][1]
    	var maxY = extent[1][1]
    	var x0 = lPad + conWidth + gap // dim of map region
    	var y0 = tPad + conHeight + gap
    	var x1 = x0 + mapWidth
    	var y1 = y0 + mapHeight
    	var xL = ((minX-x0)/(x1-x0)) // as a frac of map region
    	var xU =  ((maxX-x0)/(x1-x0))
    	var yL = ((minY-y0)/(y1-y0))
    	var yU =  ((maxY-y0)/(y1-y0))
        var spanX = Dx[1] - Dx[0]
        var spanY = Dy[1] - Dy[0]
        // update global values
    	xD = [((spanX*xL) + Dx[0]), ((spanX*xU) + Dx[0])]
        // yD is more complex since the reference point is the top of the screen
        yD = [(spanY*(1-yU) + Dy[0]), (spanY*(1-yL) + Dy[0])]
        // save the extent in fraction units, needed by
        // the row counter in eC_slices.js
        // reference point 0,0 is lower left
        brushExtent = [xL, xU, 1-yU, 1-yL] // global variable
    	clearContour();
    	drawContour(xD, yD);
    } // end of brushed

} // end of activateBrush

var clearBrush = function() {
    d3.selectAll(".brush").remove();
    xD = Dx; // reset global variables
    yD = Dy;
    activateBrush();
}

// Guide & slice related functions.  Note that these need to
// respond to brushing, which changes xD and yD

// Now the create the guides that will control the slices

var activateGuides = function() {

    // Controls the guides (cursor) in the contour area
    // AND ultimately the slicing process which depends
    // on the cursor position

    // IMPORTANT: xD, yD, xF, yF, xM, yM are global variables

    var getMouseXY = function() {
    // get the mouse coordinates & report in terms of [0...1]
    	var mouse = d3.mouse(document.getElementById("CON"));
    	mX = mouse[0]; // in pixels
    	mY = mouse[1];
    	if (mX < 0) {mX = 0}; // truncate low
    	if (mY < 0) {mY = 0};
    	if (mX > conWidth) {mX = conWidth}; // truncate high
    	if (mY > conHeight) {mY = conHeight};
    	mX = mX/conWidth // as fraction
    	mY = 1 - (mY/conHeight)
    	followMouse(mX, mY);
    	document.Show.mouseX.value = mX;
    	document.Show.mouseY.value = mY;

        if (mY == 0 || mY == 1) {
            clearXslice()
        } else {
            var row = getRowIndex(M, mY)
    	    drawXslice(row)
        }

        if (mX ==0 || mX == 1) {
            clearYslice()
        } else {
            var col = getColIndex(M, mX)
	        drawYslice(col)
        }

    } // end of getMouseXY

    var followMouse = function(mX, mY) { // This draws the guides, nothing else

    	var xPos = (mX * conWidth) + lPad // mX now in pixels
    	var yPos = tPad + conHeight - (mY * conHeight) // mY now in pixels

    	var vertU = {x: xPos, y: tPad } // x, y at the top of window
        // x, y at the bottom of window:
    	var vertL = {x: xPos, y: tPad + conHeight }
    	var vEnds = [vertU, vertL];

    	var horzU = {x: lPad, y: yPos } // x, y at the left side of window
        // x, y at the right side of window:
    	var horzL = {x: lPad + conWidth, y: yPos }
    	var hEnds = [horzU, horzL];

    	d3.selectAll(".cursorGuide") // remove previous lines
    	    .remove();

    	var line = d3.svg.line()
    	    .x(function(d) { return d.x;})
    	    .y(function(d) { return d.y;})

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(hEnds))

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(vEnds))

    } // end of followMouse

    getMouseXY(xD, yD); // This starts it all off

} // end of activateGuides


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Slice related functions. Note that these need to respond to brushing,
// which changes xD and yD

// A helper function first

var arraySize = function(array) { // merged from several SO post ideas
	// js is row-major
	// assumes 2D array
	// assumes each row has the same length (= no. of columns)
	var nrows = array.length
	var ncols = array[0].length // length of first row
	return [nrows, ncols]
}


var getXsliceLimits = function() {

	// This function gets the left & right edge indices
	// based on xD (the limits)
	// These are column numbers

	var xbase = d3.range(Dx[0], Dx[1]+1);
	var left = Math.round(xD[0]); // left edge/index of plotting window
	var right = Math.round(xD[1]); // right edge
	var lIndex = xbase.indexOf(left);
	var rIndex = xbase.indexOf(right);
	return [lIndex, rIndex];

} // end of getXsliceLimits


var getXsliceXvalues = function() {

	// This function creates the x values needed for the x slice
	// These are a selection of the column numbers

	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	var nc = arraySize(M)[1];
	var xbase = d3.range(1, nc + 1);
	var xdata = xbase.slice(lIndex, rIndex + 1);
	return xdata;

} // end of getXsliceXvalues


var getXsliceYvalues = function(row) {

	// This function creates the y values needed for the x slice
	// See getXsliceLimits for logic & comments
	// console.log("row is:", row)
	var ybase = M[row]; // the y values in the row
	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	var ydata = ybase.slice(lIndex, rIndex + 1);
	return ydata;
} // end of getXsliceYvalues


var getRowIndex = function(M, mY) { // do we need to specify the args?

	// See getColIndex for more comments
	// IMPORTANT: reference point for brushing extent is lower left corner!
	var yNat = yD[0] + ((mY) * (yD[1] - yD[0]))
	document.Show.mouseYnat.value = yNat
	var nRow = arraySize(M)[0]
	var nRowAdj = nRow*(brushExtent[3]-brushExtent[2])
	console.log("brushExtent is:", brushExtent)
	var yInd = (mY*nRowAdj + nRow*brushExtent[2])
	yInd = Math.round(yInd);
	document.Show.mouseRow.value = yInd;
	return(yInd-1);
} // end of getRowIndex

var clearXslice = function() {
	d3.selectAll(".xslice")
		.remove();
}

var drawXslice = function(row) {

	// WARNING: the matrix data has the columns in the correct order
	// However, row 1 of the M matrix is at the bottom of the display
	// and js counts from the top of the svg

	// Start by removing any existing xslice and associated clipping elements.
	d3.selectAll(".xslice")
	    .remove();
	d3.selectAll(".xViewport")
		.remove();
	d3.selectAll("#xClipBox")
		.remove();
	// d3.selectAll("defs") // w/o this empty tags accumulate
	// 	.remove();

	var xdata = getXsliceXvalues();
	var ydata = getXsliceYvalues(row);
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < xdata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

	var xscl = d3.scale.linear()
	    .domain(d3.extent(xy, function(d) {return d.x;})) //use just the x part
	    .range([0, xslWidth])

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var yscl = d3.scale.linear()
        .domain([minM, ((maxM - minM)*yF + minM)])
	    .range([xslHeight-5, 5]) // keeps line from touching outline

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);}) // apply the x scale to the x data
	    .y(function(d) { return yscl(d.y);}) // apply the y scale to the y data

	// This approach permits re-use of #xViewport (defined in eC_controls.js)

	var clip = svg.append("defs").append("clipPath")
   	  .attr("id", "xClipBox")

	clip.append("use").attr("xlink:href", "#xViewport");

	var xSlice = svg.append("g")
		.attr("clip-path", "url(#xClipBox)")
		.attr("class", "xViewport") // needs a class to be able to clear

	xSlice.append("path")
		.attr("transform", "translate(" + lPad + ","
			+ (tPad + conHeight + gap) + ")")
		.attr({width: xslWidth,
			height: xslHeight,
			"class": "line",
			"class": "xslice",
			"d": slice(xy)}) // use the return value of slice(xy) as 'd'

} // end of drawXslice


// ----- Now everything related to the y slice -----

var getYsliceLimits = function() {

	// This function gets the bottom and top edge limits
	// based on yD
	// These are row numbers

	var ybase = d3.range(Dy[0], Dy[1]+1); // array of row numbers 1:nr
	// The next steps find the indices corresponding to yD
	var bottom = Math.round(yD[0]); // bottom value
	var top = Math.round(yD[1]); // top value of desired plotting window
	var bIndex = ybase.indexOf(bottom);
	var tIndex = ybase.indexOf(top);
	return [bIndex, tIndex];

    } // end of getYsliceLimits


var getYsliceYvalues = function() {

	// This function creates the y values (actual data) needed for the y slice

	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	var nr = arraySize(M)[0];
	var ybase = d3.range(1, nr+1);
	var ydata = ybase.slice(bIndex, tIndex +1);
	return ydata;
}


var getYsliceXvalues = function(col){
	var xdata = []; // Get just the column of interest
	var nr = arraySize(M)[0];
	for (var i = 0; i < nr; i++){
	    xdata.push(M[i][col]);
	}
	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	xdata = xdata.slice(bIndex, tIndex + 1);
	return xdata;
}


var getColIndex = function(M, mX) {

	// Report the mouse position in native coordinates

	var xNat = xD[0] + ((mX) * (xD[1] - xD[0]))
	document.Show.mouseXnat.value = xNat

	// Report the mouse position as a column

	var nCol = arraySize(M)[1] // No. rows in the original matrix
	// Adjust no. cols to acct for brushing
	nColAdj = nCol*(brushExtent[1]-brushExtent[0])
	var xInd = nCol*brushExtent[0] + mX*nColAdj
	xInd = Math.round(xInd);
	document.Show.mouseCol.value = xInd;
	return(xInd-1);
} // end of getColIndex

var clearYslice = function() {
	d3.selectAll(".yslice")
		.remove();
}

var drawYslice = function(col) {

	// WARNING: the matrix data has the columns in the correct order
	// However, row 1 of the M matrix is at the bottom of the display
	// and js counts from the top of the svg

	// See drawXslice for detailed comments

	d3.selectAll(".yslice")
	    .remove();
	d3.selectAll(".yViewport")
		.remove();
	d3.selectAll("#yClipBox")
		.remove();
	// d3.selectAll("defs")
	// 	.remove();

    // Important: on the y slice, the x values are the column slice,
    // and the y values are the row numbers (since the plot is rotated 90)

	var xdata = getYsliceXvalues(col);
	var ydata = getYsliceYvalues();
	// Because of how the x data is created, we need to reverse it
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < ydata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var xscl = d3.scale.linear()
	    .domain([minM, ((maxM - minM)*xF + minM)])
		// range is set so the top of the peaks point toward the contour area
	    .range([yslWidth-5, 5])

	var yscl = d3.scale.linear()
		.domain(d3.extent(xy, function(d) {return d.y;}))
	    .range([yslHeight + tPad, tPad])

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);})
	    .y(function(d) { return yscl(d.y);})

	var clip = svg.append("defs").append("clipPath")
		.attr("id", "yClipBox")

	clip.append("use").attr("xlink:href", "#yViewport");

	var ySlice = svg.append("g")
		.attr("clip-path", "url(#yClipBox)")
		.attr("class", "yViewport")

	ySlice.append("path")
		// .attr("transform", "translate(" + (lPad + conWidth + gap + yslWidth)
		//  	+ "," + (tPad) + ")")
.attr("transform", "translate(" + (lPad + conWidth + gap)
	+ "," + (0) + ")")
		.attr({width: yslWidth,
			height: yslHeight,
			"class": "line",
			"class": "yslice",
			"d": slice(xy)})

} // end of drawYslice

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// These function calls return nothing: they draw something, or define behaviors
// All cause things to be appended to global variable 'svg'
// defined in eC_globals.js
// Many modify or use the key global variables xD, yD, xF, yF

drawOutlines(); // Appends rectangles outlining the areas we'll be using.
drawControls();
drawMap(); // Appends an svg:path object (the contour lines)
// and draws them in the map region.

// On first run, draw the full domain in the contour area:
drawContour(xD,yD); // Works as drawMap does, just in a different region.

// These next two control behaviors and depend on xD & yD
activateBrush(); // Handles all the brush tasks
svg.on('mousemove', activateGuides); // Controls mouse behavior &
// drawing of slices
