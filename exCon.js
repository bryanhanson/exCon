var CL = [ { "level" : [ 100 ], "x" : [ 100, 98.85, 97.8, 97.7, 96.55, 95.5, 95.4, 94.35, 94.24, 93.2, 93.09, 92.05, 91.94, 90.9, 90.79, 89.75, 89.64, 88.54, 88.49, 87.37, 87.34, 86.22, 86.19, 85.06, 85.03, 83.91, 83.88, 82.77, 82.73, 81.64, 81.64, 81.58, 80.54, 80.43, 79.38, 79.38, 79.38, 79.28, 78.23, 78.23, 78.23, 78.23, 78.13, 77.08, 77.08, 77.08, 77.08 ], "y" : [ 28.02, 28.02, 28.77, 28.84, 28.84, 29.58, 29.66, 30.4, 30.47, 31.22, 31.29, 32.03, 32.11, 32.85, 32.92, 33.67, 33.71, 34.48, 34.51, 35.3, 35.33, 36.12, 36.14, 36.93, 36.95, 37.75, 37.78, 38.57, 38.61, 39.38, 40.2, 40.27, 41.02, 41.09, 41.83, 42.65, 43.47, 43.54, 44.28, 45.1, 45.92, 46.73, 46.81, 47.55, 48.37, 49.18, 50 ] }, { "level" : [ 100 ], "x" : [ 90.9, 91.94, 93.09, 94.24, 94.35, 94.35, 94.35, 95.4, 95.5, 96.55, 96.65, 97.7, 97.8, 98.85, 98.95, 100 ], "y" : [ 1, 1.74, 1.74, 1.74, 1.82, 2.63, 3.45, 4.19, 4.27, 5.01, 5.08, 5.83, 5.9, 6.64, 6.72, 7.46 ] }, { "level" : [ 100 ], "x" : [ 100, 98.95, 98.85, 97.7, 96.65, 96.65, 97.7, 97.8, 98.85, 98.95, 100 ], "y" : [ 9.24, 9.98, 10.06, 10.06, 10.8, 11.62, 12.36, 12.43, 13.18, 13.25, 13.99 ] }, { "level" : [ 120 ], "x" : [ 20.51, 19.42, 19.36, 19.36, 19.03, 18.27, 18.23, 17.88, 17.69, 17.5, 17.12, 17.08, 16.54, 15.97, 15.39, 14.81, 14.24, 13.66, 13.28, 12.51, 12.28, 11.82, 11.36, 11.33, 10.78, 10.21, 10.17, 9.52, 9.06, 9.03, 8.48, 7.91, 7.88, 7.68, 7.33, 7.04, 6.76, 6.37, 5.6, 5.32, 5.03, 5.32, 4.74, 4.45, 4.43, 4.26, 4.07, 3.69, 3.49, 3.47, 3.3, 3.07, 3.11, 3.28, 3.3, 3.69, 4.07, 4.43, 4.45, 5.14, 5.6, 5.99, 6.76, 7.52, 7.91, 8.48, 9.06, 9.63, 10.21, 10.59, 11.32, 11.36, 12.13, 12.51, 12.9, 13.66, 14.71, 14.81, 15.97, 16.54, 17.12, 18.23, 18.27, 19.42, 20.57, 21.72, 22.01, 22.87, 24.02, 25.17, 25.34, 26.1, 26.33, 27.48, 28.63, 29.78, 30.93, 32.08, 33.23, 34.38, 35.53, 36.69, 37.84, 38.41, 38.99, 40.14, 41.29, 41.35, 42.44, 43.02, 43.59, 44.74, 44.8, 45.9, 46.47, 47.05, 48.2, 49.35, 49.45, 50.5, 51.65, 52.8, 52.91, 53.95, 55.1, 56.26, 57.41, 57.51, 58.56, 58.66, 59.71, 59.76, 60.86, 60.92, 62.01, 63.16, 64.31, 65.47, 66.62, 67.77, 68.92, 70.07, 71.22, 72.37, 72.41, 73.29, 73.52, 74.29, 74.67, 75.06, 75.83, 75.88, 76.98, 77.01, 77.36, 77.74, 78.13, 78.17, 78.7, 79.28, 79.33, 79.85, 80.43, 80.54, 81.58, 81.64, 82.16, 82.73, 83.31, 83.88, 84.46, 85.03, 85.09, 85.14, 86.19, 86.24, 86.57, 86.65, 86.65, 86.57, 86.19, 85.96, 85.53, 85.05, 85.03, 84.71, 84.46, 84.46, 84.46, 84.8, 85.03, 85.2, 85.06, 85.03, 84.75, 84.17, 83.88, 83.5, 82.76, 82.73, 82.16, 81.62, 81.58, 81.01, 80.54, 80.47, 80.43, 79.28, 79.17, 78.13, 76.98, 76.87, 75.83, 75.72, 74.67, 74.57, 73.52, 72.37, 71.22, 70.07, 68.92, 67.77, 67.66, 66.62, 65.47, 64.42, 64.31, 63.16, 62.01, 60.97, 60.86, 59.81, 59.71, 58.56, 58.45, 57.41, 56.26, 56.15, 55.1, 53.95, 52.8, 52.7, 51.65, 50.5, 49.35, 49.24, 48.2, 47.05, 45.9, 44.74, 43.59, 42.55, 42.44, 41.29, 40.25, 40.14, 39.04, 38.99, 37.89, 37.84, 36.74, 36.69, 35.59, 35.53, 34.44, 34.38, 33.29, 33.23, 32.08, 30.99 ], "y" : [ 1, 1.78, 1.82, 2.63, 3.45, 4.23, 4.27, 5.08, 5.9, 6.72, 7.46, 7.53, 8.35, 8.76, 9.17, 9.57, 9.98, 10.39, 10.8, 11.34, 11.62, 12.43, 13.21, 13.25, 14.07, 14.84, 14.88, 15.7, 16.48, 16.52, 17.33, 18.11, 18.15, 18.97, 19.78, 20.6, 21.01, 21.42, 21.96, 22.23, 23.05, 23.87, 24.68, 25.43, 25.5, 26.32, 27.13, 27.95, 28.77, 29.58, 29.99, 30.4, 31.22, 32.03, 32.07, 32.85, 33.67, 34.48, 34.51, 35.3, 35.84, 36.12, 36.52, 36.93, 37.21, 37.75, 38.16, 38.57, 39.11, 39.38, 40.2, 40.24, 41.02, 41.42, 41.83, 42.38, 42.65, 42.69, 43.26, 43.47, 43.67, 44.28, 44.3, 44.3, 44.45, 44.9, 45.1, 45.59, 45.68, 45.84, 45.92, 46.73, 46.87, 46.87, 46.87, 46.87, 46.87, 47.01, 47.08, 47.2, 47.39, 47.22, 46.94, 46.73, 46.6, 46.33, 45.94, 45.92, 45.37, 45.1, 44.83, 44.32, 44.28, 43.74, 43.47, 43.19, 42.92, 42.68, 42.65, 41.91, 41.87, 41.86, 41.83, 41.09, 41.09, 41.09, 41.06, 41.02, 40.27, 40.2, 39.46, 39.38, 38.61, 38.57, 38.02, 37.78, 37.79, 37.77, 37.78, 38.02, 38.16, 38.36, 38.08, 37.77, 37.75, 36.93, 36.66, 36.12, 35.71, 35.3, 34.52, 34.48, 33.71, 33.67, 32.85, 32.03, 31.29, 31.22, 30.4, 29.66, 29.58, 28.77, 28.02, 27.95, 27.21, 27.13, 26.32, 25.91, 25.5, 25.09, 24.68, 23.94, 23.87, 23.05, 22.31, 22.23, 21.42, 20.6, 19.78, 18.97, 18.42, 18.15, 17.33, 16.52, 16.48, 15.7, 14.88, 14.07, 13.25, 12.43, 12.03, 11.62, 10.8, 10.73, 9.98, 9.17, 8.76, 8.35, 7.53, 7.46, 6.72, 5.9, 5.83, 5.08, 4.27, 3.45, 3.41, 3.38, 3.45, 4.19, 4.19, 4.27, 5.01, 5.08, 5.83, 5.9, 6.64, 6.68, 6.68, 6.68, 6.64, 6.68, 6.72, 6.99, 7.12, 6.72, 6.68, 6.64, 6.64, 5.9, 5.83, 5.08, 5.01, 5.01, 5.08, 5.83, 5.83, 5.9, 6.64, 6.64, 6.68, 6.72, 7.46, 7.46, 7.49, 7.53, 8.28, 8.28, 8.31, 8.28, 8.28, 7.53, 7.49, 7.46, 6.72, 6.68, 5.9, 5.86, 5.08, 5.04, 4.27, 4.23, 3.45, 3.41, 2.63, 2.59, 1.82, 1.79, 1.54, 1 ] }, { "level" : [ 140 ], "x" : [ 7.91, 7.89, 7.45, 7.45, 7.52, 7.68, 7.88, 7.88, 7.88, 7.88, 7.91, 8.29, 8.77, 9.06, 9.44, 10.21, 10.78, 11.36, 12.47, 12.51, 13.63, 13.66, 14.79, 14.81, 15.93, 15.97, 16.73, 17.12, 17.69, 18.27, 19.03, 19.42, 20.28, 20.57, 21.72, 22.1, 22.87, 23.99, 24.02, 25.17, 26.33, 27.48, 28.63, 29.78, 30.82, 30.93, 32.08, 33.23, 34.38, 35.53, 36.69, 36.72, 37.84, 37.89, 38.99, 40.14, 40.17, 41.29, 42.06, 42.44, 43.59, 43.62, 44.74, 44.77, 45.43, 45.61, 45.61, 45.9, 45.93, 46.28, 46.76, 47.05, 48.2, 48.25, 49.35, 49.73, 50.5, 50.54, 51.36, 51.65, 52.8, 53.95, 55.1, 56.15, 56.26, 57.41, 58.56, 59.6, 59.71, 60.86, 62.01, 63.06, 63.16, 64.31, 65.41, 65.47, 66.62, 67.77, 68.92, 69.02, 70.07, 70.18, 70.13, 70.11, 70.13, 70.07, 68.97, 68.92, 67.77, 66.72, 66.72, 66.72, 67.77, 67.82, 67.82, 68.92, 69.02, 70.07, 70.65, 71.22, 72.37, 73.52, 73.63, 74.67, 75.83, 76.06, 76.69, 76.98, 77.36, 78.13, 78.17, 78.9, 79.28, 79.66, 80.43, 80.47, 80.72, 80.81, 80.81, 80.66, 80.59, 80.45, 80.43, 79.38, 79.28, 78.13, 77.08, 76.98, 75.83, 74.67, 73.52, 72.37, 71.33, 71.22, 70.07, 68.92, 68.81, 67.77, 66.62, 65.47, 65.36, 64.31, 63.16, 62.01, 60.86, 60.75, 59.71, 58.56, 57.41, 56.26, 55.1, 53.95, 52.8, 51.65, 50.5, 49.35, 48.2, 47.05, 45.9, 44.74, 43.59, 43.21, 42.44, 41.35, 41.29, 40.14, 38.99, 38.41, 37.84, 37.07, 36.69, 36.11, 35.53, 34.77, 34.38, 33.29, 33.23, 32.14, 32.08, 30.93, 29.88, 29.78, 28.63, 28.57, 27.48, 27.42, 26.71, 26.33, 25.75, 25.17, 25.14, 24.02, 23.99, 23.16, 22.87, 22.01, 21.72, 20.57, 19.42, 18.27, 17.98, 17.12, 16.54, 15.97, 14.81, 14.8, 13.99, 13.66, 13.32, 12.9, 12.51, 12.37, 12.02, 11.69, 11.36, 11.35, 11.2, 11.03, 10.52, 10.31, 10.21, 9.88, 9.06, 8.87, 7.91 ], "y" : [ 25.48, 25.5, 26.32, 27.13, 27.95, 28.77, 29.58, 30.4, 31.22, 32.03, 32.11, 32.85, 33.67, 34.08, 34.48, 35.03, 35.3, 35.5, 36.12, 36.14, 36.93, 36.95, 37.75, 37.78, 38.57, 38.61, 39.38, 39.66, 40.2, 40.61, 41.02, 41.22, 41.83, 41.95, 42.45, 42.65, 42.92, 43.47, 43.48, 43.63, 43.88, 44.12, 44.12, 44.15, 44.28, 44.3, 44.52, 44.52, 44.45, 44.42, 44.3, 44.28, 43.49, 43.47, 43.14, 42.67, 42.65, 42.11, 41.83, 41.67, 41.03, 41.02, 40.22, 40.2, 39.38, 38.57, 37.75, 37.01, 36.93, 36.12, 35.3, 35.03, 34.51, 34.48, 33.94, 33.67, 32.89, 32.85, 32.03, 31.76, 31.76, 31.62, 31.76, 32.03, 32.07, 32.31, 32.44, 32.85, 32.88, 33.12, 32.92, 33.67, 33.69, 33.71, 34.48, 34.5, 34.51, 34.51, 34.51, 34.48, 33.74, 33.67, 32.85, 32.03, 31.22, 31.18, 30.4, 30.36, 30.33, 29.58, 28.77, 27.95, 27.21, 27.13, 26.32, 25.54, 25.5, 25.09, 24.68, 24.41, 24.27, 23.91, 23.87, 23.59, 23.32, 23.05, 22.23, 21.83, 21.42, 20.64, 20.6, 19.78, 19.38, 18.97, 18.19, 18.15, 17.33, 16.52, 15.7, 14.88, 14.07, 13.25, 13.18, 12.43, 12.41, 11.89, 11.62, 11.59, 11.41, 11.34, 11.07, 11.07, 10.8, 10.77, 10.77, 10.78, 10.8, 11.21, 11.21, 11.58, 11.62, 11.89, 12.16, 12.39, 12.41, 12.43, 12.71, 12.71, 12.71, 12.71, 12.71, 12.71, 12.71, 12.84, 12.98, 12.98, 13.05, 13.05, 13.23, 13.05, 12.64, 12.43, 12.03, 11.62, 11.6, 11.41, 11.07, 10.8, 10.53, 9.98, 9.57, 9.17, 8.89, 8.35, 8.08, 7.53, 7.49, 6.72, 6.69, 6.17, 5.9, 5.86, 5.86, 5.9, 6.68, 6.72, 7.53, 7.94, 8.35, 9.09, 9.17, 9.96, 9.98, 10.8, 11, 11.62, 11.75, 12.11, 12.2, 12.32, 12.43, 12.84, 13.25, 13.66, 14.06, 14.07, 14.88, 15.21, 15.7, 16.52, 17.13, 17.33, 18.15, 18.97, 19.74, 19.78, 20.6, 21.42, 22.23, 23.05, 23.32, 23.87, 24.55, 24.68, 25.48 ] }, { "level" : [ 160 ], "x" : [ 12.51, 12.28, 11.94, 11.65, 11.74, 11.94, 11.74, 11.74, 12.49, 12.51, 13.2, 13.66, 13.83, 14.24, 14.65, 14.81, 15.58, 15.97, 17.09, 17.12, 18.04, 18.27, 18.96, 19.42, 20.28, 20.57, 21.43, 21.72, 22.84, 22.87, 24.02, 24.48, 25.17, 26.29, 26.33, 27.48, 28.63, 29.78, 30.82, 30.93, 32.08, 33.23, 34.38, 35.15, 35.53, 36.69, 37.26, 37.84, 38.99, 39.02, 40.14, 40.18, 41.29, 41.31, 41.52, 41.98, 41.98, 41.87, 41.67, 41.58, 42.44, 42.48, 43.59, 43.98, 44.74, 45.32, 45.9, 46.28, 47.05, 47.1, 48.2, 48.25, 49.06, 49.35, 49.39, 49.92, 50.5, 51.65, 52.8, 53.95, 54.53, 55.1, 56.26, 57.41, 57.46, 58.56, 58.6, 58.94, 59.42, 59.71, 59.76, 60.09, 60.28, 60.48, 60.48, 59.76, 59.71, 59.42, 59.13, 58.56, 57.41, 56.26, 55.68, 55.1, 53.95, 52.8, 52.75, 51.65, 50.5, 49.35, 48.3, 48.2, 47.05, 45.93, 45.9, 44.74, 43.59, 42.44, 41.29, 40.14, 38.99, 37.89, 37.84, 36.71, 36.69, 35.56, 35.53, 34.42, 34.38, 33.27, 33.23, 32.08, 31.04, 30.93, 29.78, 28.63, 27.48, 26.33, 26.04, 25.17, 24.79, 24.02, 23.26, 22.87, 21.72, 21.67, 20.57, 19.42, 18.27, 17.12, 17.09, 15.97, 15.8, 15.77, 15.64, 15.39, 15.01, 14.81, 14.65, 14.35, 13.89, 13.66, 13.63, 12.8, 12.51 ], "y" : [ 24.27, 24.68, 25.5, 26.32, 27.13, 27.95, 28.77, 29.58, 30.4, 30.43, 31.22, 31.76, 32.03, 32.85, 33.67, 33.94, 34.48, 34.65, 35.3, 35.32, 36.12, 36.32, 36.93, 37.26, 37.75, 37.95, 38.57, 38.73, 39.38, 39.4, 39.93, 40.2, 40.61, 41.02, 41.03, 41.15, 41.42, 41.72, 41.83, 41.85, 41.85, 41.94, 42.04, 41.83, 41.74, 41.29, 41.02, 40.74, 40.22, 40.2, 39.4, 39.38, 38.59, 38.57, 37.75, 36.93, 36.12, 35.3, 34.48, 33.67, 32.88, 32.85, 32.24, 32.03, 31.49, 31.22, 30.81, 30.4, 29.62, 29.58, 28.81, 28.77, 27.95, 27.21, 27.13, 26.32, 25.91, 25.77, 25.54, 25.91, 26.32, 26.59, 26.73, 26.39, 26.32, 25.54, 25.5, 24.68, 23.87, 23.12, 23.05, 22.23, 21.42, 20.6, 19.78, 18.97, 18.89, 18.15, 17.33, 17.13, 17.13, 17.17, 17.33, 17.5, 17.82, 18.13, 18.15, 18.69, 18.42, 18.35, 18.15, 18.13, 17.82, 17.33, 17.32, 17.31, 17.31, 17.31, 17.31, 17.13, 16.84, 16.52, 16.5, 15.7, 15.68, 14.88, 14.86, 14.07, 14.04, 13.25, 13.22, 12.64, 12.43, 12.41, 12.41, 12.41, 12.23, 12.27, 12.43, 13.05, 13.25, 13.66, 14.07, 14.23, 14.86, 14.88, 15.29, 15.5, 15.68, 15.68, 15.7, 16.35, 16.52, 17.33, 18.15, 18.97, 19.78, 20.19, 20.6, 21.42, 22.23, 22.98, 23.05, 23.87, 24.27 ] }, { "level" : [ 160 ], "x" : [ 30.93, 30.16, 30.07, 29.82, 29.82, 30.16, 30.64, 30.93, 31.7, 32.08, 33.23, 34.38, 35.53, 36.11, 36.69, 37.45, 37.84, 38.07, 38.41, 38.7, 38.6, 37.84, 37.8, 36.97, 36.69, 35.53, 34.38, 33.23, 32.08, 30.99, 30.93 ], "y" : [ 25.54, 26.32, 27.13, 27.95, 28.77, 29.58, 30.4, 30.67, 31.22, 31.42, 31.49, 31.54, 31.33, 31.22, 30.94, 30.4, 29.99, 29.58, 28.77, 27.95, 27.13, 26.36, 26.32, 25.5, 25.23, 24.89, 24.7, 24.71, 24.96, 25.5, 25.54 ] }, { "level" : [ 180 ], "x" : [ 17.12, 17.09, 16.66, 16.25, 16.43, 16.54, 16.62, 17.09, 17.12, 17.88, 18.23, 18.27, 19.42, 19.71, 20.55, 20.57, 21.53, 21.72, 22.58, 22.87, 23.74, 24.02, 24.89, 25.17, 26.29, 26.33, 27.48, 28.63, 29.67, 29.78, 30.93, 32.08, 32.14, 33.23, 34.38, 34.49, 35.53, 35.59, 35.59, 35.53, 34.38, 33.34, 33.23, 33.18, 32.08, 30.93, 29.78, 28.73, 28.63, 27.48, 27.19, 26.9, 26.36, 26.33, 26.13, 25.83, 25.67, 25.56, 25.56, 25.46, 25.46, 25.56, 25.75, 26.1, 26.33, 27.19, 27.48, 27.76, 28.63, 28.68, 29.78, 30.93, 31.04, 32.08, 33.23, 33.34, 33.34, 33.34, 33.23, 32.19, 32.08, 31.04, 30.93, 29.78, 28.63, 27.48, 26.33, 25.75, 25.17, 24.02, 23.45, 22.87, 21.72, 20.57, 20.19, 19.42, 19.39, 18.65, 18.27, 18.25, 18.1, 18.08, 17.81, 17.5, 17.12 ], "y" : [ 25.43, 25.5, 26.32, 27.13, 27.95, 28.77, 29.58, 30.4, 30.44, 31.22, 32.03, 32.05, 32.58, 32.85, 33.67, 33.68, 34.48, 34.69, 35.3, 35.5, 36.12, 36.32, 36.93, 37.14, 37.75, 37.77, 37.82, 37.82, 38.57, 38.58, 38.61, 38.64, 38.57, 37.79, 37.79, 37.75, 37.01, 36.93, 36.12, 36.04, 36.04, 35.3, 35.26, 35.3, 36.08, 36.08, 36.04, 35.3, 35.26, 35.23, 34.48, 33.67, 32.85, 32.78, 32.03, 31.22, 30.4, 29.58, 28.77, 27.95, 27.13, 26.32, 25.5, 24.68, 24.48, 23.87, 23.46, 23.05, 22.26, 22.23, 21.69, 21.43, 21.42, 20.67, 20.67, 20.6, 19.78, 18.97, 18.89, 18.15, 18.08, 17.33, 17.29, 17.29, 17.06, 17.06, 17.13, 17.33, 17.61, 17.95, 18.15, 18.31, 18.69, 18.8, 18.97, 19.74, 19.78, 20.6, 21.34, 21.42, 22.23, 23.05, 23.87, 24.68, 25.43 ] }, { "level" : [ 180 ], "x" : [ 42.44, 42.34, 42.34, 42.44, 43.49, 43.49, 43.59, 44.74, 44.8, 44.85, 44.85, 44.74, 43.7, 43.59, 42.44 ], "y" : [ 21.38, 21.42, 22.23, 22.31, 23.05, 23.87, 23.94, 23.94, 23.87, 23.05, 22.23, 22.16, 21.42, 21.39, 21.38 ] } ]
var M = [ [ 100, 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 110, 110, 111, 114, 116, 118, 120, 120, 121, 122, 122, 123, 124, 123, 123, 120, 118, 117, 115, 114, 115, 113, 111, 110, 109, 108, 108, 107, 107, 107, 108, 109, 110, 111, 111, 112, 113, 113, 114, 115, 115, 114, 113, 112, 111, 111, 112, 112, 112, 113, 114, 114, 115, 115, 116, 116, 117, 117, 116, 114, 112, 109, 106, 104, 102, 101, 100, 100, 99, 99, 99, 99, 98, 98, 97, 97 ], [ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 110, 111, 113, 115, 118, 120, 121, 122, 124, 125, 125, 126, 127, 128, 127, 124, 121, 120, 118, 116, 114, 113, 112, 112, 110, 109, 109, 108, 108, 108, 109, 110, 111, 112, 112, 113, 114, 114, 115, 116, 116, 115, 114, 113, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 117, 115, 113, 111, 107, 105, 103, 102, 101, 101, 100, 100, 100, 99, 99, 98, 98, 97 ], [ 101, 102, 103, 104, 105, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 118, 120, 122, 125, 126, 127, 128, 129, 130, 131, 131, 128, 125, 121, 120, 118, 116, 114, 113, 113, 111, 111, 111, 111, 110, 109, 110, 111, 112, 113, 113, 114, 115, 115, 116, 117, 117, 116, 115, 114, 114, 113, 113, 114, 114, 115, 115, 116, 116, 117, 118, 118, 119, 119, 118, 116, 114, 112, 108, 105, 103, 103, 102, 101, 101, 100, 100, 99, 99, 98, 98, 97 ], [ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 115, 117, 117, 118, 121, 123, 126, 128, 130, 130, 131, 132, 133, 134, 131, 129, 125, 122, 120, 118, 116, 114, 113, 112, 112, 113, 112, 112, 111, 112, 113, 113, 114, 115, 116, 116, 117, 117, 118, 118, 116, 116, 115, 115, 115, 114, 114, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 117, 115, 112, 108, 106, 104, 103, 102, 102, 102, 101, 100, 99, 99, 99, 98, 98 ], [ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 116, 117, 120, 122, 124, 126, 129, 130, 132, 133, 135, 136, 136, 134, 132, 129, 126, 122, 120, 118, 116, 114, 114, 114, 114, 114, 113, 113, 114, 115, 116, 116, 117, 117, 117, 118, 118, 119, 119, 118, 117, 116, 116, 115, 115, 116, 116, 116, 117, 117, 118, 118, 119, 120, 120, 120, 120, 119, 116, 113, 109, 106, 104, 104, 103, 102, 102, 101, 101, 100, 99, 99, 99, 98 ], [ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 111, 113, 115, 118, 121, 123, 125, 127, 129, 131, 133, 135, 137, 138, 138, 137, 134, 132, 130, 127, 122, 120, 118, 116, 116, 116, 116, 115, 113, 114, 115, 116, 117, 117, 118, 118, 119, 119, 119, 120, 120, 119, 118, 117, 117, 116, 116, 117, 117, 117, 118, 119, 119, 119, 120, 121, 121, 121, 121, 119, 116, 113, 110, 107, 105, 105, 103, 103, 103, 102, 101, 100, 100, 99, 99, 99 ], [ 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 113, 114, 116, 119, 121, 124, 126, 128, 130, 133, 135, 137, 138, 140, 140, 139, 137, 135, 133, 131, 127, 122, 120, 118, 118, 117, 117, 116, 115, 116, 116, 117, 118, 118, 118, 119, 119, 120, 120, 121, 121, 120, 119, 119, 118, 117, 117, 118, 119, 118, 118, 118, 119, 120, 122, 123, 123, 123, 122, 120, 117, 113, 110, 108, 106, 105, 104, 103, 103, 102, 101, 101, 100, 100, 99, 99 ], [ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 114, 117, 119, 122, 124, 127, 129, 131, 134, 136, 138, 140, 142, 142, 142, 140, 138, 136, 133, 129, 125, 122, 120, 119, 118, 118, 117, 116, 117, 117, 118, 119, 119, 120, 120, 120, 121, 121, 121, 122, 121, 120, 120, 120, 119, 119, 120, 120, 120, 120, 120, 120, 123, 123, 124, 124, 124, 123, 121, 119, 114, 112, 108, 106, 106, 104, 104, 103, 102, 102, 101, 101, 100, 100, 99 ], [ 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 112, 115, 117, 120, 122, 125, 127, 130, 132, 135, 137, 139, 142, 144, 144, 144, 142, 140, 138, 136, 132, 129, 126, 123, 120, 120, 119, 119, 118, 119, 119, 120, 120, 120, 121, 122, 122, 123, 123, 123, 123, 122, 123, 122, 122, 121, 122, 122, 122, 123, 123, 123, 124, 125, 125, 126, 126, 125, 124, 122, 120, 116, 113, 109, 107, 106, 105, 104, 104, 103, 102, 102, 101, 101, 100, 100 ], [ 100, 101, 102, 103, 103, 104, 105, 106, 107, 108, 110, 114, 117, 119, 121, 123, 126, 128, 130, 133, 136, 139, 141, 144, 146, 147, 146, 145, 143, 141, 138, 136, 133, 130, 127, 124, 121, 120, 120, 120, 120, 120, 121, 122, 123, 124, 124, 125, 125, 126, 126, 125, 126, 126, 126, 125, 126, 127, 128, 128, 129, 129, 128, 128, 128, 128, 128, 128, 126, 125, 123, 122, 119, 114, 109, 108, 107, 106, 105, 104, 103, 103, 102, 102, 101, 100, 100 ], [ 101, 102, 103, 103, 104, 104, 105, 106, 108, 110, 112, 116, 119, 121, 124, 125, 127, 130, 132, 135, 137, 140, 143, 147, 149, 149, 149, 147, 145, 143, 141, 139, 136, 133, 131, 128, 125, 122, 121, 122, 122, 122, 123, 125, 125, 126, 127, 127, 127, 128, 128, 128, 129, 129, 130, 131, 131, 132, 132, 133, 133, 133, 132, 132, 131, 131, 130, 129, 128, 126, 125, 124, 121, 117, 111, 109, 108, 106, 105, 104, 103, 102, 101, 101, 100, 100, 100 ], [ 101, 102, 103, 104, 104, 105, 106, 107, 108, 110, 114, 119, 121, 124, 126, 128, 129, 132, 134, 137, 140, 143, 147, 149, 151, 151, 151, 149, 147, 145, 143, 141, 138, 136, 134, 131, 128, 126, 124, 125, 125, 126, 126, 127, 128, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 134, 135, 135, 136, 136, 137, 137, 136, 136, 135, 134, 133, 131, 129, 128, 127, 126, 123, 119, 115, 111, 109, 107, 105, 104, 103, 102, 101, 100, 100, 100, 99 ], [ 102, 103, 104, 104, 105, 105, 106, 108, 110, 113, 118, 121, 124, 126, 128, 130, 132, 134, 136, 139, 143, 147, 150, 154, 154, 154, 153, 151, 149, 148, 146, 143, 141, 139, 137, 136, 132, 130, 128, 128, 128, 129, 129, 130, 130, 131, 132, 132, 132, 133, 134, 134, 135, 135, 136, 137, 138, 139, 139, 140, 140, 140, 139, 139, 138, 137, 137, 135, 132, 130, 129, 127, 124, 120, 116, 112, 109, 106, 105, 103, 102, 101, 101, 100, 99, 99, 99 ], [ 102, 103, 104, 104, 105, 106, 107, 108, 111, 116, 121, 124, 126, 128, 131, 134, 135, 137, 139, 143, 147, 152, 156, 157, 157, 157, 156, 155, 153, 151, 148, 146, 143, 142, 141, 140, 138, 135, 133, 132, 132, 133, 133, 133, 134, 135, 135, 135, 135, 136, 136, 137, 137, 138, 138, 139, 140, 141, 141, 142, 142, 143, 142, 142, 141, 141, 140, 139, 137, 134, 133, 129, 125, 121, 114, 110, 107, 106, 106, 104, 103, 102, 101, 100, 99, 99, 99 ], [ 102, 103, 104, 105, 105, 106, 108, 110, 113, 118, 123, 127, 129, 132, 137, 141, 142, 142, 145, 150, 154, 157, 161, 161, 160, 160, 160, 159, 157, 154, 151, 148, 146, 145, 143, 142, 142, 139, 137, 136, 137, 137, 138, 138, 139, 139, 139, 139, 139, 139, 139, 139, 140, 140, 141, 142, 142, 143, 144, 144, 144, 145, 145, 145, 145, 145, 144, 142, 140, 139, 136, 129, 124, 119, 113, 109, 106, 106, 105, 104, 103, 102, 101, 101, 100, 99, 99 ], [ 102, 103, 104, 105, 106, 107, 109, 113, 116, 120, 125, 129, 133, 137, 143, 147, 149, 151, 152, 154, 158, 161, 164, 165, 164, 164, 163, 163, 160, 157, 154, 151, 149, 147, 145, 145, 144, 143, 141, 140, 141, 141, 141, 141, 141, 142, 142, 142, 142, 142, 142, 142, 143, 143, 143, 144, 144, 145, 146, 146, 146, 147, 148, 148, 148, 148, 145, 143, 142, 140, 134, 128, 123, 117, 112, 108, 106, 105, 105, 104, 104, 103, 102, 101, 100, 100, 99 ], [ 103, 104, 105, 106, 107, 109, 111, 115, 118, 122, 127, 133, 140, 143, 150, 152, 153, 155, 157, 159, 162, 164, 167, 168, 168, 168, 167, 166, 163, 160, 157, 153, 150, 148, 148, 147, 147, 147, 145, 145, 144, 143, 143, 143, 144, 144, 144, 144, 145, 145, 145, 145, 146, 146, 146, 146, 146, 147, 147, 148, 149, 150, 150, 150, 150, 149, 147, 145, 143, 141, 134, 127, 123, 117, 111, 108, 105, 105, 104, 104, 103, 103, 102, 101, 100, 100, 100 ], [ 104, 105, 106, 107, 108, 110, 113, 117, 120, 125, 129, 138, 145, 151, 156, 156, 157, 158, 160, 164, 166, 168, 170, 171, 172, 171, 171, 169, 166, 163, 160, 156, 153, 151, 150, 150, 149, 149, 149, 148, 146, 146, 146, 146, 146, 146, 146, 147, 148, 148, 149, 149, 149, 148, 148, 148, 148, 149, 149, 150, 150, 150, 150, 150, 150, 150, 148, 146, 143, 141, 136, 129, 123, 117, 110, 108, 105, 104, 103, 102, 102, 101, 101, 100, 100, 100, 100 ], [ 103, 104, 105, 106, 108, 110, 114, 118, 123, 127, 133, 143, 150, 156, 160, 160, 161, 162, 167, 170, 171, 172, 173, 175, 175, 174, 174, 173, 171, 168, 164, 160, 156, 155, 154, 153, 153, 152, 152, 150, 149, 148, 148, 148, 148, 148, 149, 149, 150, 152, 152, 152, 152, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 147, 144, 141, 138, 132, 125, 118, 111, 108, 105, 103, 102, 101, 101, 101, 100, 100, 100, 100, 100 ], [ 102, 103, 104, 106, 108, 112, 116, 120, 125, 129, 137, 146, 154, 161, 163, 165, 166, 169, 172, 173, 174, 175, 177, 178, 178, 178, 178, 177, 174, 171, 168, 164, 160, 158, 157, 157, 156, 156, 156, 155, 152, 151, 150, 150, 151, 151, 152, 154, 156, 157, 157, 156, 155, 153, 152, 152, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 147, 144, 141, 138, 133, 127, 120, 113, 109, 106, 103, 101, 101, 101, 100, 100, 100, 100, 100, 100 ], [ 101, 102, 104, 106, 109, 113, 118, 122, 127, 133, 141, 149, 155, 161, 165, 168, 170, 172, 175, 176, 177, 179, 181, 181, 181, 180, 180, 179, 177, 174, 171, 167, 165, 163, 161, 160, 160, 160, 160, 160, 157, 155, 155, 154, 154, 155, 157, 159, 161, 161, 161, 159, 156, 154, 154, 153, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 147, 144, 141, 137, 133, 129, 123, 116, 110, 107, 104, 102, 102, 101, 101, 101, 100, 100, 100, 100 ], [ 101, 102, 105, 107, 110, 115, 120, 124, 129, 136, 143, 149, 155, 162, 168, 170, 174, 176, 178, 179, 181, 182, 184, 184, 183, 181, 180, 180, 179, 177, 174, 172, 170, 168, 166, 165, 164, 164, 164, 164, 162, 160, 159, 159, 158, 160, 162, 164, 166, 166, 163, 159, 157, 156, 155, 153, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 146, 143, 140, 137, 133, 129, 124, 119, 112, 108, 105, 103, 103, 102, 101, 101, 101, 101, 100, 100 ], [ 102, 103, 106, 108, 112, 116, 121, 125, 130, 138, 145, 151, 157, 163, 170, 174, 178, 181, 181, 184, 186, 186, 187, 186, 184, 181, 180, 180, 180, 179, 178, 174, 173, 173, 171, 170, 170, 169, 168, 167, 166, 164, 163, 162, 161, 164, 167, 169, 170, 168, 164, 160, 158, 157, 155, 153, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 147, 144, 141, 138, 135, 133, 128, 125, 122, 116, 109, 107, 104, 104, 103, 102, 101, 101, 101, 101, 101 ], [ 103, 105, 107, 110, 114, 118, 122, 127, 132, 140, 146, 153, 159, 165, 171, 176, 180, 183, 185, 186, 189, 190, 188, 187, 184, 182, 180, 180, 180, 179, 178, 176, 176, 176, 176, 174, 174, 173, 172, 170, 168, 167, 165, 163, 164, 165, 169, 170, 170, 170, 166, 162, 159, 157, 155, 153, 151, 150, 150, 150, 150, 150, 150, 150, 150, 150, 146, 142, 139, 136, 133, 131, 128, 125, 122, 117, 110, 108, 106, 105, 104, 103, 103, 101, 101, 101, 101 ], [ 104, 106, 108, 111, 115, 119, 123, 128, 134, 141, 148, 154, 161, 166, 172, 179, 182, 184, 186, 189, 190, 190, 190, 187, 185, 183, 180, 180, 180, 179, 179, 177, 176, 177, 178, 178, 178, 177, 176, 174, 171, 168, 166, 164, 166, 168, 170, 170, 170, 170, 168, 162, 159, 157, 155, 153, 151, 150, 150, 150, 150, 150, 150, 150, 150, 148, 144, 140, 137, 134, 132, 129, 127, 125, 122, 117, 111, 110, 107, 107, 106, 105, 104, 103, 102, 101, 100 ], [ 104, 106, 110, 114, 118, 121, 125, 129, 135, 142, 150, 157, 162, 167, 173, 180, 183, 186, 188, 190, 190, 190, 189, 184, 183, 181, 180, 179, 179, 176, 177, 176, 176, 177, 178, 179, 180, 180, 179, 177, 173, 169, 167, 166, 167, 169, 170, 170, 170, 170, 167, 161, 159, 157, 155, 153, 151, 150, 150, 150, 150, 150, 150, 149, 147, 145, 141, 138, 135, 133, 130, 127, 125, 123, 121, 118, 113, 111, 110, 110, 109, 109, 107, 106, 105, 103, 100 ], [ 105, 107, 111, 117, 121, 124, 127, 131, 137, 148, 154, 159, 164, 168, 174, 181, 184, 187, 190, 191, 191, 190, 187, 184, 180, 178, 175, 174, 172, 171, 173, 173, 173, 176, 178, 179, 180, 180, 180, 179, 175, 170, 168, 166, 168, 169, 170, 170, 170, 170, 166, 161, 158, 156, 154, 153, 151, 150, 150, 150, 150, 148, 147, 146, 145, 143, 139, 135, 133, 131, 129, 126, 124, 121, 120, 118, 114, 111, 111, 111, 110, 110, 109, 107, 106, 104, 100 ], [ 107, 109, 113, 118, 122, 126, 129, 134, 139, 150, 156, 160, 165, 170, 175, 181, 184, 188, 191, 192, 192, 189, 185, 181, 177, 173, 171, 169, 168, 167, 169, 170, 172, 174, 176, 178, 179, 180, 180, 179, 175, 170, 168, 166, 166, 168, 168, 170, 170, 168, 164, 160, 158, 155, 152, 151, 150, 149, 149, 148, 147, 145, 144, 143, 142, 141, 136, 133, 130, 129, 127, 125, 123, 120, 119, 118, 115, 112, 111, 111, 111, 110, 109, 109, 109, 105, 100 ], [ 107, 110, 114, 117, 121, 126, 130, 135, 142, 151, 159, 163, 167, 171, 177, 182, 185, 189, 192, 193, 191, 187, 183, 179, 174, 169, 167, 166, 164, 164, 165, 166, 169, 171, 174, 178, 179, 180, 180, 178, 173, 169, 166, 165, 165, 166, 165, 168, 169, 166, 163, 159, 157, 154, 152, 149, 148, 147, 146, 145, 143, 142, 141, 140, 139, 138, 133, 130, 128, 127, 125, 124, 122, 120, 118, 117, 115, 112, 111, 111, 111, 111, 110, 109, 108, 106, 100 ], [ 107, 110, 115, 119, 123, 129, 135, 141, 146, 156, 161, 165, 168, 173, 179, 182, 186, 189, 193, 194, 191, 184, 179, 175, 170, 166, 162, 161, 160, 160, 161, 162, 165, 169, 172, 176, 178, 179, 179, 176, 172, 168, 165, 163, 163, 163, 163, 165, 166, 164, 161, 158, 155, 152, 150, 147, 146, 144, 143, 142, 141, 139, 139, 138, 137, 135, 131, 128, 127, 125, 124, 122, 121, 119, 118, 116, 115, 113, 112, 111, 111, 110, 110, 109, 109, 105, 100 ], [ 108, 110, 114, 120, 128, 134, 140, 146, 152, 158, 162, 166, 169, 175, 180, 183, 186, 189, 193, 195, 190, 184, 176, 171, 167, 163, 160, 158, 157, 156, 157, 159, 163, 166, 170, 174, 176, 178, 178, 176, 172, 167, 164, 161, 161, 160, 161, 163, 163, 163, 160, 157, 153, 150, 148, 146, 144, 142, 141, 140, 139, 138, 136, 135, 134, 133, 129, 127, 126, 124, 122, 121, 119, 118, 117, 116, 114, 113, 112, 111, 110, 110, 109, 109, 107, 104, 100 ], [ 108, 110, 115, 121, 131, 137, 142, 147, 152, 159, 163, 167, 170, 177, 182, 184, 187, 189, 192, 194, 189, 183, 174, 169, 165, 161, 158, 156, 154, 153, 154, 157, 160, 164, 167, 171, 172, 174, 174, 173, 171, 168, 161, 159, 158, 158, 159, 161, 161, 160, 158, 155, 151, 149, 147, 144, 142, 141, 140, 138, 137, 136, 135, 134, 132, 130, 128, 126, 125, 123, 121, 119, 118, 117, 116, 115, 113, 112, 112, 111, 110, 109, 108, 107, 105, 101, 100 ], [ 110, 111, 116, 122, 129, 137, 142, 146, 151, 158, 164, 168, 172, 179, 183, 186, 189, 190, 192, 193, 188, 182, 174, 168, 164, 161, 157, 154, 151, 149, 151, 154, 158, 161, 167, 170, 170, 170, 170, 169, 168, 166, 160, 157, 156, 156, 157, 158, 159, 159, 156, 153, 150, 148, 146, 144, 141, 140, 140, 138, 136, 135, 134, 133, 131, 129, 127, 125, 123, 122, 120, 118, 117, 116, 115, 114, 112, 111, 110, 108, 107, 106, 105, 104, 102, 100, 100 ], [ 110, 112, 118, 124, 130, 136, 142, 146, 151, 157, 163, 168, 174, 178, 183, 187, 189, 190, 191, 192, 189, 182, 174, 168, 164, 160, 157, 153, 149, 148, 149, 153, 157, 161, 167, 170, 170, 170, 168, 166, 165, 163, 159, 156, 154, 153, 155, 155, 155, 155, 152, 150, 149, 147, 145, 143, 141, 140, 139, 138, 136, 134, 133, 131, 130, 128, 126, 124, 122, 120, 119, 117, 116, 115, 114, 113, 111, 110, 107, 106, 105, 105, 102, 101, 100, 100, 100 ], [ 110, 113, 119, 125, 131, 136, 141, 145, 150, 158, 164, 168, 172, 177, 183, 187, 189, 191, 192, 191, 190, 183, 174, 168, 164, 160, 157, 153, 150, 149, 150, 154, 158, 162, 166, 170, 170, 168, 166, 164, 162, 160, 158, 155, 152, 151, 151, 151, 151, 151, 149, 148, 147, 146, 145, 143, 142, 140, 139, 137, 135, 134, 132, 131, 129, 127, 125, 123, 121, 119, 117, 116, 114, 114, 113, 112, 110, 108, 107, 105, 103, 100, 100, 100, 100, 99, 99 ], [ 110, 114, 119, 126, 131, 135, 140, 144, 149, 158, 164, 168, 172, 176, 183, 184, 189, 190, 191, 191, 190, 183, 174, 169, 165, 161, 158, 154, 150, 151, 152, 155, 159, 164, 168, 168, 168, 167, 165, 163, 160, 158, 155, 153, 150, 148, 148, 148, 148, 148, 147, 146, 146, 145, 143, 142, 141, 140, 139, 138, 136, 134, 132, 131, 128, 126, 124, 122, 120, 118, 116, 114, 113, 113, 112, 111, 108, 107, 106, 105, 104, 102, 100, 99, 99, 99, 99 ], [ 110, 116, 121, 127, 132, 136, 140, 144, 148, 154, 160, 166, 171, 176, 180, 184, 189, 190, 191, 191, 191, 183, 176, 170, 166, 163, 159, 156, 154, 155, 155, 158, 161, 165, 170, 167, 166, 165, 163, 161, 158, 155, 152, 150, 146, 145, 145, 145, 146, 146, 144, 145, 145, 144, 142, 141, 140, 140, 140, 140, 138, 136, 134, 131, 128, 125, 123, 121, 119, 117, 115, 113, 112, 111, 111, 110, 108, 106, 105, 102, 100, 100, 99, 99, 99, 98, 98 ], [ 110, 115, 121, 127, 132, 136, 140, 144, 148, 151, 157, 162, 169, 174, 178, 181, 186, 188, 190, 191, 190, 184, 177, 172, 168, 165, 162, 159, 158, 158, 159, 161, 166, 167, 169, 166, 164, 163, 161, 159, 156, 153, 149, 146, 142, 142, 141, 142, 143, 143, 143, 143, 144, 142, 141, 140, 140, 140, 140, 140, 140, 138, 134, 131, 128, 125, 123, 120, 117, 116, 114, 112, 110, 109, 108, 107, 106, 105, 102, 101, 100, 99, 99, 99, 98, 98, 97 ], [ 110, 114, 120, 126, 131, 136, 140, 143, 146, 149, 154, 159, 166, 171, 177, 180, 182, 186, 190, 190, 190, 185, 179, 174, 171, 168, 166, 163, 164, 163, 166, 169, 170, 170, 168, 164, 162, 161, 158, 155, 153, 150, 147, 143, 139, 139, 139, 139, 140, 141, 141, 142, 142, 141, 140, 140, 140, 140, 140, 140, 140, 137, 134, 131, 128, 125, 122, 119, 116, 114, 112, 110, 109, 109, 108, 107, 105, 100, 100, 100, 99, 99, 99, 98, 98, 97, 97 ], [ 110, 112, 118, 124, 130, 135, 139, 142, 145, 148, 151, 157, 163, 169, 172, 176, 179, 183, 187, 190, 190, 186, 180, 177, 175, 173, 170, 169, 169, 170, 171, 172, 170, 170, 167, 163, 160, 157, 154, 152, 149, 147, 144, 140, 137, 137, 136, 137, 138, 138, 139, 140, 141, 140, 140, 140, 140, 140, 140, 140, 140, 138, 134, 131, 128, 124, 121, 118, 115, 112, 110, 109, 108, 107, 106, 105, 100, 100, 100, 99, 99, 99, 98, 98, 98, 97, 97 ], [ 108, 110, 116, 122, 128, 133, 137, 141, 143, 146, 149, 154, 161, 165, 168, 172, 175, 180, 184, 188, 189, 187, 182, 178, 176, 176, 175, 173, 174, 173, 175, 174, 173, 171, 168, 161, 157, 154, 150, 148, 145, 143, 141, 138, 135, 135, 134, 135, 135, 136, 136, 137, 138, 139, 140, 140, 140, 140, 140, 140, 140, 139, 135, 130, 126, 123, 120, 117, 114, 111, 109, 108, 107, 106, 105, 100, 100, 100, 99, 99, 98, 98, 98, 98, 97, 97, 96 ], [ 108, 110, 114, 120, 126, 129, 134, 139, 142, 144, 146, 152, 158, 161, 164, 168, 171, 175, 181, 184, 186, 186, 183, 179, 178, 178, 177, 175, 178, 177, 177, 176, 175, 173, 168, 162, 156, 153, 149, 145, 142, 140, 138, 136, 133, 132, 132, 132, 134, 134, 134, 134, 135, 136, 137, 138, 140, 140, 140, 140, 139, 137, 133, 127, 123, 120, 118, 115, 112, 108, 108, 106, 106, 105, 100, 100, 100, 98, 98, 98, 98, 98, 98, 97, 96, 96, 96 ], [ 108, 110, 112, 117, 122, 126, 129, 135, 139, 141, 144, 149, 153, 156, 160, 165, 168, 171, 177, 181, 184, 185, 182, 180, 180, 179, 178, 178, 180, 179, 179, 178, 176, 173, 168, 163, 157, 152, 148, 143, 139, 137, 135, 133, 131, 130, 130, 131, 132, 132, 132, 131, 132, 132, 133, 134, 136, 137, 137, 137, 136, 134, 131, 124, 121, 118, 116, 114, 111, 109, 107, 106, 105, 100, 100, 100, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96 ], [ 107, 109, 111, 116, 119, 122, 125, 130, 135, 137, 140, 144, 148, 152, 156, 161, 165, 168, 172, 177, 181, 184, 181, 181, 181, 180, 180, 180, 180, 180, 180, 178, 178, 173, 168, 163, 158, 152, 146, 141, 138, 136, 134, 132, 130, 129, 128, 128, 130, 130, 130, 129, 128, 129, 129, 130, 132, 133, 133, 134, 134, 132, 128, 122, 119, 116, 114, 112, 108, 106, 105, 105, 100, 100, 100, 97, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 95 ], [ 107, 108, 110, 113, 115, 118, 121, 126, 131, 134, 137, 140, 143, 148, 152, 157, 162, 165, 169, 173, 177, 181, 181, 181, 180, 181, 181, 181, 180, 180, 180, 178, 176, 170, 167, 163, 158, 152, 145, 140, 137, 134, 132, 130, 129, 127, 127, 126, 127, 128, 128, 126, 125, 125, 125, 123, 126, 128, 129, 130, 130, 125, 124, 119, 116, 114, 112, 110, 107, 106, 105, 100, 100, 100, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95 ], [ 108, 109, 110, 111, 114, 116, 118, 122, 127, 130, 133, 136, 140, 144, 148, 153, 157, 161, 165, 169, 173, 177, 180, 180, 180, 180, 181, 180, 180, 180, 179, 178, 173, 168, 165, 161, 156, 149, 143, 139, 136, 133, 130, 129, 128, 126, 126, 125, 125, 125, 125, 124, 122, 121, 120, 120, 120, 120, 121, 122, 123, 122, 120, 117, 114, 111, 108, 106, 105, 100, 100, 100, 100, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95 ], [ 108, 109, 110, 110, 112, 115, 116, 118, 122, 125, 129, 133, 137, 140, 144, 149, 152, 157, 161, 165, 169, 173, 176, 179, 179, 180, 180, 180, 178, 178, 176, 175, 171, 165, 163, 160, 153, 148, 143, 139, 135, 132, 129, 128, 127, 125, 124, 124, 123, 123, 122, 122, 120, 118, 117, 118, 115, 117, 118, 118, 119, 117, 116, 115, 112, 109, 107, 105, 100, 100, 100, 100, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 95 ], [ 108, 109, 110, 110, 110, 113, 114, 116, 119, 122, 126, 131, 134, 138, 141, 145, 149, 152, 156, 160, 164, 169, 171, 174, 177, 175, 178, 179, 177, 175, 174, 172, 168, 163, 160, 157, 151, 147, 143, 138, 133, 130, 128, 125, 125, 124, 123, 122, 121, 121, 120, 120, 118, 116, 115, 111, 110, 110, 110, 110, 113, 114, 113, 112, 110, 107, 105, 102, 100, 100, 100, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94 ], [ 108, 109, 109, 110, 110, 111, 112, 114, 117, 120, 124, 128, 131, 135, 138, 142, 145, 149, 152, 155, 158, 163, 166, 167, 170, 173, 175, 175, 175, 173, 171, 169, 164, 160, 156, 153, 149, 144, 140, 136, 131, 129, 126, 124, 123, 123, 122, 121, 120, 120, 120, 119, 117, 115, 111, 110, 110, 110, 110, 110, 109, 109, 110, 109, 108, 106, 103, 101, 100, 100, 100, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 95, 94 ], [ 108, 108, 109, 109, 110, 110, 110, 112, 115, 118, 121, 125, 128, 131, 134, 138, 141, 145, 147, 149, 152, 157, 160, 161, 163, 166, 169, 170, 170, 171, 168, 162, 158, 155, 152, 148, 144, 140, 136, 132, 129, 127, 124, 122, 121, 120, 120, 120, 120, 120, 119, 117, 115, 113, 110, 110, 110, 110, 109, 108, 108, 107, 107, 106, 105, 104, 102, 100, 100, 100, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94 ], [ 107, 108, 109, 109, 110, 110, 110, 112, 115, 117, 119, 122, 125, 127, 130, 133, 137, 141, 143, 145, 148, 149, 152, 155, 157, 159, 160, 160, 161, 162, 159, 156, 153, 149, 146, 142, 139, 134, 130, 128, 126, 125, 122, 120, 120, 120, 119, 119, 119, 118, 117, 115, 113, 111, 110, 110, 109, 108, 107, 106, 106, 105, 104, 104, 103, 102, 100, 100, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 95, 94, 94 ], [ 107, 108, 109, 109, 110, 110, 110, 113, 115, 117, 118, 119, 120, 123, 126, 129, 131, 134, 139, 142, 144, 145, 147, 148, 150, 152, 154, 154, 153, 154, 151, 149, 146, 143, 140, 136, 130, 128, 126, 124, 122, 121, 120, 119, 118, 117, 117, 117, 116, 116, 115, 113, 112, 110, 109, 108, 107, 106, 106, 105, 104, 103, 102, 101, 101, 100, 100, 100, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94, 94 ], [ 107, 108, 108, 109, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 121, 125, 125, 127, 131, 136, 140, 141, 142, 144, 144, 145, 148, 149, 148, 147, 146, 144, 140, 138, 136, 130, 127, 125, 123, 121, 119, 118, 117, 117, 116, 116, 116, 115, 114, 113, 113, 111, 110, 109, 108, 107, 106, 105, 105, 103, 103, 102, 102, 102, 103, 101, 100, 100, 100, 99, 98, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94, 94 ], [ 107, 107, 108, 108, 109, 109, 110, 110, 112, 113, 114, 115, 116, 117, 117, 120, 120, 121, 123, 129, 134, 136, 138, 139, 139, 139, 140, 142, 142, 141, 141, 140, 137, 134, 131, 127, 124, 122, 120, 118, 117, 115, 113, 114, 113, 114, 114, 113, 112, 111, 110, 110, 109, 108, 107, 106, 105, 105, 105, 104, 104, 104, 103, 103, 103, 101, 100, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94 ], [ 106, 107, 107, 108, 108, 108, 109, 110, 110, 111, 112, 113, 114, 115, 114, 115, 116, 116, 119, 123, 125, 130, 133, 134, 134, 134, 134, 135, 135, 136, 135, 134, 132, 130, 128, 124, 121, 119, 118, 116, 114, 112, 111, 111, 111, 112, 112, 111, 110, 110, 110, 109, 108, 108, 107, 108, 107, 106, 105, 104, 104, 104, 103, 103, 103, 102, 101, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94, 94, 94 ], [ 106, 106, 107, 107, 107, 108, 109, 109, 110, 110, 111, 111, 112, 113, 112, 111, 111, 112, 115, 118, 118, 119, 126, 128, 128, 127, 128, 128, 129, 130, 129, 128, 127, 125, 122, 120, 118, 117, 115, 114, 112, 110, 110, 110, 110, 110, 111, 110, 110, 110, 109, 109, 108, 107, 106, 105, 105, 105, 104, 104, 104, 103, 103, 102, 102, 102, 101, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94, 94 ], [ 105, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 110, 110, 111, 110, 110, 110, 110, 111, 114, 115, 116, 121, 121, 121, 121, 121, 122, 123, 124, 124, 123, 121, 119, 118, 117, 115, 114, 112, 111, 110, 110, 110, 110, 110, 110, 109, 109, 108, 109, 107, 107, 106, 106, 105, 105, 104, 104, 104, 104, 103, 103, 102, 102, 102, 101, 100, 100, 99, 99, 98, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94, 94 ], [ 105, 105, 106, 106, 107, 107, 108, 108, 109, 109, 109, 109, 109, 110, 110, 110, 110, 110, 110, 110, 111, 112, 115, 115, 115, 115, 115, 116, 116, 117, 119, 118, 117, 116, 114, 113, 112, 110, 110, 110, 110, 110, 110, 109, 109, 108, 107, 106, 106, 106, 106, 106, 105, 105, 105, 104, 104, 104, 103, 103, 103, 102, 102, 102, 101, 100, 100, 99, 99, 98, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94, 94 ], [ 104, 105, 105, 106, 106, 107, 107, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 108, 110, 110, 110, 110, 110, 110, 110, 111, 113, 115, 116, 115, 113, 112, 110, 110, 110, 110, 110, 110, 109, 108, 108, 108, 108, 107, 106, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 103, 103, 103, 102, 102, 102, 101, 100, 100, 100, 99, 99, 98, 97, 97, 96, 96, 96, 96, 96, 96, 96, 96, 95, 95, 94, 94, 94, 94, 94 ], [ 104, 104, 105, 105, 106, 106, 107, 107, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 108, 108, 108, 106, 106, 108, 109, 110, 110, 112, 112, 113, 112, 111, 110, 110, 110, 110, 109, 109, 109, 108, 107, 107, 107, 107, 106, 106, 105, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 102, 102, 101, 101, 100, 100, 100, 100, 99, 99, 98, 97, 97, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94, 94, 94, 94 ], [ 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 106, 106, 105, 105, 104, 104, 104, 104, 105, 107, 107, 106, 105, 105, 107, 108, 109, 110, 110, 110, 110, 110, 110, 109, 109, 109, 109, 109, 109, 108, 107, 107, 107, 107, 106, 106, 105, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 102, 102, 101, 101, 100, 100, 100, 100, 100, 99, 98, 97, 97, 96, 96, 96, 96, 96, 96, 96, 95, 95, 95, 94, 94, 94, 94, 94, 94 ] ]
var xD = [ 1, 100 ]
var yD = [ 1, 50 ]

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Global variables collected here, with NO exceptions

// Define layout variables for each subsection of the display
// These are fixed sizes, they don't change even if the window is resized
// 15" MacBookPro Retina screen is 2880 x 1800, non-Retina is 1440 x 900

// Official abbrevs to be used: y slice area: ysl, x slice area: xsl,
// locator map: map, contour area: con
// The entire area containing all the above is the window,
// use win (the div is 'main')

var winWidth = 1200, // define sizes of windows
    winHeight = 650, // these values determine the aspect ratio of the layout
    conWidth = 0.7*winWidth, // < 90% to allow for padding and gaps
    conHeight = 0.7*winHeight,
    yslWidth = 0.2*winHeight, // ysl_width must equal xsl_height
    yslHeight = conHeight,
    xslWidth = conWidth,
    xslHeight = yslWidth,
    mapWidth = yslWidth*winWidth/winHeight,
    mapHeight = yslWidth;

var gap = 0.075*winHeight, // gap for displaying axis
    lPad = (winWidth - conWidth - gap - mapWidth)/2,
    // this approach ensures centering in main window
    rPad = lPad,
    tPad = (winHeight - conHeight - gap - xslHeight)/2,
    bPad = tPad;

// Define the master global variable for drawing purposes.
// Everything gets appended to this object

var svg = d3.select('#main')
// The full window is appended to #main and named 'svg'.
// This simply defines a variable/window into which we
// can draw, nothing is drawn.
    .append('svg')
    .attr("width", window.innerWidth)
    .attr("height", window.innerHeight)
    // .style('width', winWidth)
    // .style('height',winHeight);

// Copy xD and yD as we'll need access to the original value

var Dx = xD,
    Dy = yD;

// Define xF and yF; x scale factor.  These are the amplification factors
// which control the vertical scales of the slices, and are set
// by the controls

var xF = 1.0,
    yF = 1.0;

// Define xM and yM, the position of the mouse w/i the contour area
// Need to provide initial values here

var xM = 0.5,
    yM = 0.5;

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

var drawOutlines = function() {
    // Outline the areas in which we will draw things

    // svg.append('rect') // outline main window (for troubleshooting, probably not in final version)
    // 	.attr({x: 0, y: 0,
    // 	       width:(winWidth),
    // 	       height: (winHeight),
    // 	       stroke: 'black',
    // 	       'stroke-width': 3,
    // 	       fill:'white'});
    svg.append('rect') // outline contour area
	.attr({x: lPad,
	       y: tPad,
	       width: conWidth,
	       height: conHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill: 'white'});
    svg.append('rect') // outline map area
	.attr({x: lPad + conWidth + gap,
	       y: tPad + conHeight + gap,
	       width: mapWidth,
	       height: mapHeight,
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});
    svg.append('rect') // outline x slice
	.attr({x: lPad,
	       y: tPad + conHeight + gap,
	       width: xslWidth,
	       height: xslHeight,
           id: "xViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});
    svg.append('rect') // outline y slice
	.attr({x: lPad + conWidth + gap,
	       y: tPad,
	       width: yslWidth,
	       height: yslHeight,
           id: "yViewport",
	       stroke: 'black',
	       'stroke-width': 1.5,
	       fill:'white'});

} // end of drawOutlines

var drawControls = function(){

    // This function draws & activates the control buttons

    // naming: R = global reset button, xR = reset x slice, yR = reset y slice
    // plusX = increase x slice amplification etc

    // button positions
    // Add x or y after button name to specify it's coordinates, e.g. xRx

    var yBut = tPad + conHeight + 0.5*gap,
	xBut = lPad + conWidth + 0.5* gap;
    var butInc = 0.25* yslWidth // spacing w/i the button set
    var butSize = 0.25*gap // radius of the button circle

    var Rx = xBut + 10, // master reset button
	Ry = yBut + 10,
	xRx = xBut, // x slice controls
	xRy = yBut + 0.5*gap + 3*butInc,
	plusXx = xBut,
	plusXy = yBut + 0.5*gap + butInc,
	minusXx = xBut,
	minusXy = yBut + 0.5*gap + 2*butInc,
	yRx =  xBut + 0.5*gap + 3*butInc, // y slice controls
	yRy = yBut,
	plusYx = xBut + 0.5*gap + butInc,
	plusYy = yBut,
	minusYx = xBut + 0.5*gap + 2*butInc,
	minusYy = yBut;

    // Now draw, label and activate all 7 buttons in groups
    // (coordinates with CSS that way)

    var g1 = svg.append("g")
//        .attr({id: "resetButton"})

    g1.append('circle') // master reset button
	    .attr({cx: Rx, cy: Ry, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetAll()" })
//        .text('R')
    g1.append('text') // master reset button
	    .attr({x: Rx, y: Ry + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
	    .attr({onclick: "resetAll()" })
        .text('R')

    g1.append('circle') // x slice reset button
	    .attr({cx: xRx, cy: xRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetXslice()" })
    g1.append('text') // x slice reset button
	    .attr({x: xRx, y: xRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetXslice()" })
        .text('R')

    g1.append('circle') // y slice reset button
	    .attr({cx: yRx, cy: yRy, r: butSize})
        .attr({class: "resetButton"})
        .attr({fill: "#008B00"})
        .attr({onclick: "resetYslice()" })
    g1.append('text') // y slice reset button
	    .attr({x: yRx, y: yRy + 7})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "resetYslice()" })
        .text('R')

    var g2 = svg.append("g")
//        .attr({id: "incButton"})

    g2.append('circle') // x slice increase button
	    .attr({cx: plusXx, cy: plusXy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseXslice()" })
    g2.append('text') // x slice increase button
	    .attr({x: plusXx, y: plusXy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseXslice()" })
        .text('+')

    g2.append('circle') // y slice increase button
	    .attr({cx: plusYx, cy: plusYy, r: butSize})
        .attr({class: "incButton"})
        .attr({onclick: "increaseYslice()" })
    g2.append('text') // y slice increase button
	    .attr({x: plusYx, y: plusYy + 6})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  20})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "increaseYslice()" })
        .text('+')

    var g3 = svg.append("g")
//        .attr({id: "decButton"})

    g3.append('circle') // x slice decrease button
	    .attr({cx: minusXx, cy: minusXy, r: butSize, text: '-'})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseXslice()" })
    g3.append('text') // x slice decrease button
	    .attr({x: minusXx, y: minusXy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseXslice()" })
        .text('-')

    g3.append('circle') // y slice decrease button
	    .attr({cx: minusYx, cy: plusYy, r: butSize})
        .attr({class: "decButton"})
        .attr({onclick: "decreaseYslice()" })
    g3.append('text') // y slice decrease button
	    .attr({x: minusYx, y: plusYy + 9})
        .attr({"font-family": "sans-serif"})
        .attr({fill: "white"})
        .attr({"font-size":  30})
        .attr({"text-anchor": "middle"})
	    .attr({"pointer-events": "none"})
        .attr({onclick: "decreaseYslice()" })
        .text('-')

} // end of drawControls

var resetAll = function() {
    clearBrush();
    clearContour();
    drawContour(Dx,Dy);
    resetXslice();
    resetYslice();
}

var resetXslice = function() {
    yF = 1.0

    if (mY == 0 || mY == 1) {
        clearXslice()
    } else {
        drawXslice(getRowIndex(M, mY))
    }
    //
    // if (mX ==0 || mX == 1) {
    //     clearYslice()
    // } else {
    //     drawYslice(getColIndex(M, mX))
    // }
    //
    // drawXslice(getRowIndex(M, mY))
}

var resetYslice = function() {
    xF = 1.0

// if (mY == 0 || mY == 1) {
//     clearXslice()
// } else {
//     drawXslice(getRowIndex(M, mY))
// }

    if (mX ==0 || mX == 1) {
        clearYslice()
    } else {
        drawYslice(getColIndex(M, mX))
    }

    // drawYslice(getColIndex(M, mX))
}

var increaseXslice = function() {
    yF = yF / 2
}

var decreaseXslice = function() {
    yF = yF * 2
}

var increaseYslice = function() {
    xF = xF / 2
}

var decreaseYslice = function() {
    xF = xF * 2
}

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Note: our map and contour areas are frequently referred to
// generically as context and focus regions in the d3 world

// xD & yD are global variables

var drawContour = function(xD, yD) { // draw the contour map
    var xContour = d3.scale.linear() // x limits for contour map
    	.domain(xD)
    	.range([0, conWidth]);
    var yContour = d3.scale.linear() // y limits for contour map
    	.domain(yD)
    	.range([conHeight, 0]);
    var lineCon = d3.svg.line()
    	.x(function(d) { return xContour(d.x); })
    	.y(function(d) { return yContour(d.y); });
    var contour = svg.append("svg")
    	.attr({x: lPad,
    	       y: tPad,
    	       width: conWidth,
    	       height: conHeight,
    	       "class": "contour",
    	       "id": "CON"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineCon)

    drawXaxis(xContour);
    drawYaxis(yContour);

} // end of drawContour


var drawXaxis = function(xScale) {
    d3.select("#X_axis").remove(); // remove existing axis
    var xAxis = d3.svg.axis()
    	.scale(xScale)
    	.orient("bottom");

    svg.append("g")
    	.attr("id", "X_axis")
    	.attr("class", "axis")
    // the math portion below must be in parens
    // the math is evaluated and '+' concatenates the strings
	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
	.attr("transform", "translate(" + lPad + "," +
        (tPad + conHeight + 0.1*gap) + ")")
	.call(xAxis);
}

var drawYaxis = function(yScale) {
    d3.select("#Y_axis").remove();
    var yAxis = d3.svg.axis()
        .scale(yScale)
        .orient("right");

    svg.append("g")
    	.attr("id", "Y_axis")
    	.attr("class", "axis")
    	.attr("transform", "translate(0," + (tPad + conHeight + 0.1*gap) + ")")
    	.attr("transform", "translate(" + (lPad + conWidth + 0.1*gap) + "," +
            (tPad) + ")")
    	.call(yAxis);
}


var clearContour = function() {
    d3.select("#CON").remove();
}

var drawMap = function() { // draw the navigation map in the map space
    var xMap = d3.scale.linear() // x limits for corner map
    	.domain(Dx)
    	.range([0, mapWidth]);
    var yMap = d3.scale.linear() // y limits for corner map
    	.domain(Dy)
    	.range([mapHeight, 0]);
    var lineMap = d3.svg.line()
    	.x(function(d) { return xMap(d.x); })
    	.y(function(d) { return yMap(d.y); });
    var map = svg.append("svg")
    	.attr({x: lPad + conWidth + gap,
    	       y: tPad + conHeight + gap,
    	       "class": "map"})
    	.selectAll("path")
    	.data(CL.map(function(d) {
            return d3.range(d.x.length).map(function(i) {
    		return {x: d.x[i], y: d.y[i]};});}))
    	.enter().append("svg:path")
    	.attr("d", lineMap)
} // end of drawMap


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Brush related functions

function activateBrush() {
    // Creates the brush, appends it, and defines its behavior

    // IMPORTANT: xD & yD are global variables

    var brush = d3.svg.brush()
    // Defines the brush, and calls the relevant functions
	.x(d3.scale.identity().domain([(lPad + conWidth + gap),
        (lPad + conWidth + gap + mapWidth)]))
	.y(d3.scale.identity().domain([(tPad + conHeight + gap),
        (tPad + conHeight + gap + mapHeight)]))
	.on("brushend", brushed)

    svg.append("svg") // Appends the svg to include the brush
	.attr("class", "brush")
	.call(brush)

    function brushed() { // Handles the response to brushing
	var extent = brush.extent() // reports in pixels
	var minX = extent[0][0]
	var maxX = extent[1][0]
	var minY = extent[0][1]
	var maxY = extent[1][1]
	var x0 = lPad + conWidth + gap // dim of map region
	var y0 = tPad + conHeight + gap
	var x1 = x0 + mapWidth
	var y1 = y0 + mapHeight
	var xDminX = ((minX-x0)/(x1-x0)) // as a frac of map region
	var xDmaxX =  ((maxX-x0)/(x1-x0))
	var yDminY = ((minY-y0)/(y1-y0))
	var yDmaxY =  ((maxY-y0)/(y1-y0))
	xD = [xDminX*Dx[0], xDmaxX*Dx[1]] // update global values
	yD = [(1-yDmaxY)*Dy[0], (1-yDminY)*Dy[1]]
	clearContour();
	drawContour(xD, yD);
    } // end of brushed

} // end of activateBrush

var clearBrush = function() {
    d3.selectAll(".brush").remove();
    xD = Dx; // reset global variables
    yD = Dy;
    activateBrush();
}

// Guide & slice related functions.  Note that these need to
// respond to brushing, which changes xD and yD

// Now the create the guides that will control the slices

var activateGuides = function() {

    // Controls the guides (cursor) in the contour area
    // AND ultimately the slicing process which depends
    // on the cursor position

    // IMPORTANT: xD, yD, xF, yF, xM, yM are global variables

    var getMouseXY = function() {
    // get the mouse coordinates & report in terms of [0...1]
    	var mouse = d3.mouse(document.getElementById("CON"));
    	mX = mouse[0]; // in pixels
    	mY = mouse[1];
    	if (mX < 0) {mX = 0}; // truncate low
    	if (mY < 0) {mY = 0};
    	if (mX > conWidth) {mX = conWidth}; // truncate high
    	if (mY > conHeight) {mY = conHeight};
    	mX = mX/conWidth // as fraction
    	mY = 1 - (mY/conHeight)
    	followMouse(mX, mY);
    	// document.Show.mouseX.value = mX;
    	// document.Show.mouseY.value = mY;

        if (mY == 0 || mY == 1) {
            clearXslice()
        } else {
    	    drawXslice(getRowIndex(M, mY))
        }

        if (mX ==0 || mX == 1) {
            clearYslice()
        } else {
	        drawYslice(getColIndex(M, mX))
        }

    } // end of getMouseXY

    var followMouse = function(mX, mY) { // This draws the guides, nothing else

    	var xPos = (mX * conWidth) + lPad // mX now in pixels
    	var yPos = tPad + conHeight - (mY * conHeight) // mY now in pixels

    	var vertU = {x: xPos, y: tPad } // x, y at the top of window
        // x, y at the bottom of window:
    	var vertL = {x: xPos, y: tPad + conHeight }
    	var vEnds = [vertU, vertL];

    	var horzU = {x: lPad, y: yPos } // x, y at the left side of window
        // x, y at the right side of window:
    	var horzL = {x: lPad + conWidth, y: yPos }
    	var hEnds = [horzU, horzL];

    	d3.selectAll(".cursorGuide") // remove previous lines
    	    .remove();

    	var line = d3.svg.line()
    	    .x(function(d) { return d.x;})
    	    .y(function(d) { return d.y;})

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(hEnds))

    	svg.append("path")
        	    .attr("class", "line")
                .attr("class", "cursorGuide")
        	    .attr("d", line(vEnds))

    } // end of followMouse

    getMouseXY(xD, yD); // This starts it all off

} // end of activateGuides


// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// Slice related functions. Note that these need to respond to brushing,
// which changes xD and yD

// A helper function first

var arraySize = function(array) { // merged from several SO post ideas
	// js is row-major
	// assumes 2D array
	// assumes each row has the same length (= no. of columns)
	var nrows = array.length
	var ncols = array[0].length // length of first row
	return [nrows, ncols]
}


var getXsliceLimits = function() {

	// This function gets the left & right edge indices
	// based on xD (the limits)
	// These are column numbers

	var nc = arraySize(M)[1]; // no. of columns in data set
	var xbase = d3.range(1, nc + 1); // array of column numbers 1:nc

	// The next steps find the indices corresponding to xD
	var left = Math.round(xD[0] * nc + 1); // left edge/index of plotting window
	var right = Math.round(xD[1] * nc); // right edge
	var lIndex = xbase.indexOf(left);
	var rIndex = xbase.indexOf(right);

	return [lIndex, rIndex];

} // end of getXsliceLimits


var getXsliceXvalues = function() {

	// This function creates the x values needed for the x slice
	// These are a selection of the column numbers

	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	var nc = arraySize(M)[1];
	var xbase = d3.range(1, nc + 1);
	var xdata = xbase.slice(lIndex, rIndex + 1);
	return xdata;

} // end of getXsliceXvalues


var getXsliceYvalues = function(row) {

	// This function creates the y values needed for the x slice
	// See getXsliceLimits for logic & comments

	var ybase = M[row]; // the y values in the row
	var lIndex = getXsliceLimits()[0];
	var rIndex = getXsliceLimits()[1];
	var ydata = ybase.slice(lIndex, rIndex + 1);
	return ydata;
} // end of getXsliceYvalues


var getRowIndex = function(M, mY) {

	var nRow = arraySize(M)[0];
	// IMPORTANT: reference point for brushing extent is lower left corner!
	//
	var yU = yD[1] * nRow; // Get upper row index
	var yL = yD[0] * nRow; // Get lower row index
	var yInd = yL + ((mY) * (yU - yL)); // get cursor position
	yInd =  Math.round(yInd);
	yInd = yInd - 1; // accts for zero-indexing in js
	// and the fact that R put the first row at the bottom!
	if (yInd < 0) {yInd = 0};
	if (yInd > nRow - 1) {yInd = nRow - 1};
    	document.Show.mouseRow.value = yInd;
	return(yInd);
} // end of getRowIndex

var clearXslice = function() {
	d3.selectAll(".xslice")
		.remove();
}

var drawXslice = function(row) {

	// WARNING: the matrix data has the columns in the correct order
	// However, row 1 of the M matrix is at the bottom of the display
	// and js counts from the top of the svg

	// Start by removing any existing xslice and associated clipping elements.
	d3.selectAll(".xslice")
	    .remove();
	d3.selectAll(".xViewport")
		.remove();
	d3.selectAll("#xClipBox")
		.remove();
	// d3.selectAll("defs") // w/o this empty tags accumulate
	// 	.remove();

	var xdata = getXsliceXvalues();
	var ydata = getXsliceYvalues(row);
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < xdata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

	var xscl = d3.scale.linear()
	    .domain(d3.extent(xy, function(d) {return d.x;})) //use just the x part
	    .range([0, xslWidth])

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var yscl = d3.scale.linear()
        .domain([minM, ((maxM - minM)*yF + minM)])
	    .range([xslHeight-5, 5]) // keeps line from touching outline

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);}) // apply the x scale to the x data
	    .y(function(d) { return yscl(d.y);}) // apply the y scale to the y data

	// This approach permits re-use of #xViewport (defined in eC_controls.js)

	var clip = svg.append("defs").append("clipPath")
   	  .attr("id", "xClipBox")

	clip.append("use").attr("xlink:href", "#xViewport");

	var xSlice = svg.append("g")
		.attr("clip-path", "url(#xClipBox)")
		.attr("class", "xViewport") // needs a class to be able to clear

	xSlice.append("path")
		.attr("transform", "translate(" + lPad + ","
			+ (tPad + conHeight + gap) + ")")
		.attr({width: xslWidth,
			height: xslHeight,
			"class": "line",
			"class": "xslice",
			"d": slice(xy)}) // use the return value of slice(xy) as 'd'

} // end of drawXslice


// Now everything related to the y slice

var getYsliceLimits = function() {

	// This function gets the bottom and top edge limits
	// based on yD
	// These are row numbers

	var nr = arraySize(M)[0]; // no. of rows in data set
	var ybase = d3.range(1, nr + 1); // array of row numbers 1:nr
	// The next steps find the indices corresponding to yD
	var bottom = Math.round(yD[0] * nr + 1); // bottom value
	var top = Math.round(yD[1] * nr); // top value of desired plotting window
	var bIndex = ybase.indexOf(bottom);
	var tIndex = ybase.indexOf(top);
	return [bIndex, tIndex];

    } // end of getYsliceLimits


var getYsliceYvalues = function() {

	// This function creates the y values (actual data) needed for the y slice

	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	var nr = arraySize(M)[0];
	var ybase = d3.range(1, nr+1);
	var ydata = ybase.slice(bIndex, tIndex +1);
	return ydata;
}


var getYsliceXvalues = function(col){
	var xdata = []; // Get just the column of interest
	var nr = arraySize(M)[0];
	for (var i = 0; i < nr; i++){
	    xdata.push(M[i][col]);
	}
	var bIndex = getYsliceLimits()[0];
	var tIndex = getYsliceLimits()[1];
	xdata = xdata.slice(bIndex, tIndex + 1);
	return xdata;
}


var getColIndex = function(M, mX) { // Row index in the original matrix
	var nCol = arraySize(M)[1];
	var xU = xD[1] * nCol;
	var xL = xD[0] * nCol;
	var xInd = xL + ((mX) * (xU - xL));
	xInd  =  Math.round(xInd);
	xInd = xInd - 1;
	if (xInd < 0) {xInd = 0};
	if (xInd > nCol - 1) {xInd = nCol - 1};
	document.Show.mouseCol.value = xInd;
	return(xInd);
} // end of getColIndex

var clearYslice = function() {
	d3.selectAll(".yslice")
		.remove();
}

var drawYslice = function(col) {

	// WARNING: the matrix data has the columns in the correct order
	// However, row 1 of the M matrix is at the bottom of the display
	// and js counts from the top of the svg

	// See drawXslice for detailed comments

	d3.selectAll(".yslice")
	    .remove();
	d3.selectAll(".yViewport")
		.remove();
	d3.selectAll("#yClipBox")
		.remove();
	// d3.selectAll("defs")
	// 	.remove();

    // Important: on the y slice, the x values are the column slice,
    // and the y values are the row numbers (since the plot is rotated 90)

	var xdata = getYsliceXvalues(col);
	var ydata = getYsliceYvalues();
	// Because of how the x data is created, we need to reverse it
	var xy = []; // start empty, add each element one at a time
	for(var i = 0; i < ydata.length; i++ ) {
	    xy.push({x: xdata[i], y: ydata[i]});
	}

    var minM = d3.min(M, function(d) { return d3.min(d); });
    var maxM = d3.max(M, function(d) { return d3.max(d); });

	var xscl = d3.scale.linear()
	    .domain([minM, ((maxM - minM)*xF + minM)])
		// range is set so the top of the peaks point toward the contour area
	    .range([yslWidth-5, 5])

	var yscl = d3.scale.linear()
		.domain(d3.extent(xy, function(d) {return d.y;}))
	    .range([yslHeight + tPad, tPad])

	var slice = d3.svg.line()
	    .x(function(d) { return xscl(d.x);})
	    .y(function(d) { return yscl(d.y);})

	var clip = svg.append("defs").append("clipPath")
		.attr("id", "yClipBox")

	clip.append("use").attr("xlink:href", "#yViewport");

	var ySlice = svg.append("g")
		.attr("clip-path", "url(#yClipBox)")
		.attr("class", "yViewport")

	ySlice.append("path")
		// .attr("transform", "translate(" + (lPad + conWidth + gap + yslWidth)
		//  	+ "," + (tPad) + ")")
.attr("transform", "translate(" + (lPad + conWidth + gap)
	+ "," + (0) + ")")
		.attr({width: yslWidth,
			height: yslHeight,
			"class": "line",
			"class": "yslice",
			"d": slice(xy)})

} // end of drawYslice

// exCon Kristina Mulry & Bryan Hanson, DePauw University, February 2014

// These function calls return nothing: they draw something, or define behaviors
// All cause things to be appended to global variable 'svg'
// defined in eC_globals.js
// Many modify or use the key global variables xD, yD, xF, yF

drawOutlines(); // Appends rectangles outlining the areas we'll be using.
drawControls();
drawMap(); // Appends an svg:path object (the contour lines)
// and draws them in the map region.

// On first run, draw the full domain in the contour area:
drawContour(xD,yD); // Works as drawMap does, just in a different region.

// These next two control behaviors and depend on xD & yD
activateBrush(); // Handles all the brush tasks
svg.on('mousemove', activateGuides); // Controls mouse behavior &
// drawing of slices
